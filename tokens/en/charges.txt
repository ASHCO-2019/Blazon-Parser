<?php{S}
 
 {S}$this->patterns[languageDB::CHARGE_NOT_ORDINARY]{S}={S}array{S}( // Charges{S}that{S}can{S}be{S}confused{S}with{S}ordinaries
cross{S}bows? { mkNode( E_CHARGE, "weapon/crossbow"); return CHARGE; }

 {S}
 {S}$this->patterns[languageDB::CHARGE]{S}={S}array{S}(
   // cross

   // human
mounted{S}knights? { mkNode( E_CHARGE, "human/knight-mounted"); return CHARGE; }
knights?{S}mounted { mkNode( E_CHARGE, "human/knight-mounted"); return CHARGE; }
archers? { mkNode( E_CHARGE, "human/archer"); return CHARGE; }
bowm[ae]n { mkNode( E_CHARGE, "human/archer"); return CHARGE; }
falconers? { mkNode( E_CHARGE, "human/falconer"); return CHARGE; }
wildm[ae]n? { mkNode( E_CHARGE, "human/savage"); return CHARGE; }
eyes? { mkNode( E_CHARGE, "human/eye"); return CHARGE; }
maidens? { mkNode( E_CHARGE, "human/maiden"); return CHARGE; }
englishm[ae]ns? { mkNode( E_CHARGE, "human/man"); return CHARGE; }
m[ae]ns? { mkNode( E_CHARGE, "human/man"); return CHARGE; }
egyptians? { mkNode( E_CHARGE, "human/egyptian"); return CHARGE; }
?(human|body){S}hearts? { mkNode( E_CHARGE, "human/heart"); return CHARGE; }
?human{S}arms? { mkNode( E_CHARGE, "human/arm"); return CHARGE; }
boys? { mkNode( E_CHARGE, "human/boy"); return CHARGE; }
(blacka)?moors? { mkNode( E_CHARGE, "human/moor"); return CHARGE; }
blacksmiths? { mkNode( E_CHARGE, "human/blacksmith"); return CHARGE; }
saracens? { mkNode( E_CHARGE, "human/saracen"); return CHARGE; }
(wild|wood|savage){S}m[ae]ns? { mkNode( E_CHARGE, "human/savage"); return CHARGE; }
savages? { mkNode( E_CHARGE, "human/savage"); return CHARGE; }
?sh(in|ank){S}bones? { mkNode( E_CHARGE, "human/bone"); return CHARGE; }
chevaliers? { mkNode( E_CHARGE, "human/knight-mounted"); return CHARGE; }
?human{S}(main|hand)s? { mkNode( E_CHARGE, "human/hand"); return CHARGE; }
?human{S}(main|hand)s?{S}clawed { mkNode( E_CHARGE, "human/hand-clawed"); return CHARGE; }
?human{S}(main|hand)s?{S}of{S}benediction { mkNode( E_CHARGE, "human/hand-benediction"); return CHARGE; }
?human{S}(mort|skull)s? { mkNode( E_CHARGE, "human/skull"); return CHARGE; }
?human{S}skeletons? { mkNode( E_CHARGE, "human/skeleton"); return CHARGE; }
deaths{S}heads? { mkNode( E_CHARGE, "human/skull"); return CHARGE; }
?human{S}(jambe|gambe|leg)s? { mkNode( E_CHARGE, "human/leg"); return CHARGE; }
?human{S}f(oo|ee)t { mkNode( E_CHARGE, "human/foot"); return CHARGE; }
?human{S}footprints? { mkNode( E_CHARGE, "human/footprint"); return CHARGE; }
?human{S}foot{S}prints? { mkNode( E_CHARGE, "human/footprint"); return CHARGE; }
askers? { mkNode( E_CHARGE, "human/asker"); return CHARGE; }
locks?{S}of{S}?*{S}hair { mkNode( E_CHARGE, "human/hair"); return CHARGE; }
?h?u?mans?{S}beards? { mkNode( E_CHARGE, "human/beard"); return CHARGE; }
   // ship
lymphads? { mkNode( E_CHARGE, "ship/galley"); return CHARGE; }
oars? { mkNode( E_CHARGE, "ship/oars"); return CHARGE; }
rudders? { mkNode( E_CHARGE, "ship/rudder"); return CHARGE; }
ships?{S}wheels? { mkNode( E_CHARGE, "ship/ships-wheel"); return CHARGE; }
? {S}?masted{S}galleys? { mkNode( E_CHARGE, "ship/galley"); return CHARGE; }
? {S}?masted{S}ships? { mkNode( E_CHARGE, "ship/ship"); return CHARGE; }
anchors? { mkNode( E_CHARGE, "ship/anchor"); return CHARGE; }
caravels? { mkNode( E_CHARGE, "ship/caravel"); return CHARGE; }
coracles? { mkNode( E_CHARGE, "ship/coracle"); return CHARGE; }
?lighter{S}boats? { mkNode( E_CHARGE, "ship/boat"); return CHARGE; }
fishing{S}boats? { mkNode( E_CHARGE, "ship/fishing-boat"); return CHARGE; }
   // game{S}animals
(sanglier|boar|grice)s? { mkNode( E_CHARGE, "game/boar"); return CHARGE; }
(roe)?bucks? { mkNode( E_CHARGE, "game/buck"); return CHARGE; }
fawns? { mkNode( E_CHARGE, "game/fawn"); return CHARGE; }
deers? { mkNode( E_CHARGE, "game/deer"); return CHARGE; }
hinds? { mkNode( E_CHARGE, "game/hind"); return CHARGE; }
(rabbit|coney)s? { mkNode( E_CHARGE, "game/rabbit"); return CHARGE; }
conies { mkNode( E_CHARGE, "game/rabbit"); return CHARGE; }
(hare|leveret)s? { mkNode( E_CHARGE, "game/hare"); return CHARGE; }
harts? { mkNode( E_CHARGE, "game/hart"); return CHARGE; }
does? { mkNode( E_CHARGE, "game/doe"); return CHARGE; }
antlers? { mkNode( E_CHARGE, "game/stag-horn"); return CHARGE; }
stags?{S}horns? { mkNode( E_CHARGE, "game/stag-horn"); return CHARGE; }
stags? { mkNode( E_CHARGE, "game/stag"); return CHARGE; }
elks? { mkNode( E_CHARGE, "game/elk"); return CHARGE; }
   // livestock{S}
(asse?|mule)s? { mkNode( E_CHARGE, "livestock/ass"); return CHARGE; }
cows? { mkNode( E_CHARGE, "livestock/cow"); return CHARGE; }
cal(f|ves) { mkNode( E_CHARGE, "livestock/calf"); return CHARGE; }
goats? { mkNode( E_CHARGE, "livestock/goat"); return CHARGE; }
ox(en)? { mkNode( E_CHARGE, "livestock/ox"); return CHARGE; }
rams? { mkNode( E_CHARGE, "livestock/ram"); return CHARGE; }
lambs? { mkNode( E_CHARGE, "livestock/lamb"); return CHARGE; }
sheep? { mkNode( E_CHARGE, "livestock/sheep"); return CHARGE; }
bulls? { mkNode( E_CHARGE, "livestock/bull"); return CHARGE; }
apree?s? { mkNode( E_CHARGE, "livestock/ox"); return CHARGE; }
(nag|horse)s? { mkNode( E_CHARGE, "livestock/horse"); return CHARGE; }
hens? { mkNode( E_CHARGE, "livestock/hen"); return CHARGE; }
?dunghill{S}cocks? { mkNode( E_CHARGE, "livestock/cock"); return CHARGE; }
gamecocks? { mkNode( E_CHARGE, "livestock/cock"); return CHARGE; }
turkeycocks? { mkNode( E_CHARGE, "livestock/turkeycock"); return CHARGE; }
(moor|heath)cocks? { mkNode( E_CHARGE, "livestock/cock"); return CHARGE; }
   // dogs
greyhounds? { mkNode( E_CHARGE, "dog/greyhound"); return CHARGE; }
(talbot|hound)s? { mkNode( E_CHARGE, "dog/talbot"); return CHARGE; }
dogs? { mkNode( E_CHARGE, "dog/dog"); return CHARGE; }
alan[dt]s { mkNode( E_CHARGE, "dog/mastiff"); return CHARGE; }
   // Wildlife
(badger|brock|gray)s? { mkNode( E_CHARGE, "wildlife/badger"); return CHARGE; }
cats?{S}a{S}mountains? { mkNode( E_CHARGE, "wildlife/wildcat"); return CHARGE; }
catamounts? { mkNode( E_CHARGE, "wildlife/wildcat"); return CHARGE; }
wildcats? { mkNode( E_CHARGE, "wildlife/wildcat"); return CHARGE; }
mountain{S}cats? { mkNode( E_CHARGE, "wildlife/wildcat"); return CHARGE; }
cats? { mkNode( E_CHARGE, "wildlife/cat"); return CHARGE; }
fox(es)? { mkNode( E_CHARGE, "wildlife/fox"); return CHARGE; }
(hedgehog|urcheon|urchin)s? { mkNode( E_CHARGE, "wildlife/hedgehog"); return CHARGE; }
(weasel|mart[ie]n|foine|stoat|ermine|genet)s? { mkNode( E_CHARGE, "wildlife/weasel"); return CHARGE; }
squirrels? { mkNode( E_CHARGE, "wildlife/squirrel"); return CHARGE; }
wol(f|ve)s? { mkNode( E_CHARGE, "wildlife/wolf"); return CHARGE; }
moles? { mkNode( E_CHARGE, "wildlife/mole"); return CHARGE; }
m(ouse|ice) { mkNode( E_CHARGE, "wildlife/mouse"); return CHARGE; }
rats? { mkNode( E_CHARGE, "wildlife/rat"); return CHARGE; }
beavers? { mkNode( E_CHARGE, "wildlife/beaver"); return CHARGE; }
bears? { mkNode( E_CHARGE, "bear/bear"); return CHARGE; }
(polar|ice){S}bears? { mkNode( E_CHARGE, "bear/polar-bear"); return CHARGE; }
mol(diwarp|e)s? { mkNode( E_CHARGE, "wildlife/mole"); return CHARGE; }
bears?{S}and{S}ragged{S}staffs? { mkNode( E_CHARGE, "bear/bear-ragged-staff"); return CHARGE; }
otters? { mkNode( E_CHARGE, "wildlife/otter"); return CHARGE; }

   // snakes{S}and{S}stuff
(asp|serpent)s? { mkNode( E_CHARGE, "serpent/serpent"); return CHARGE; }
snakes? { mkNode( E_CHARGE, "serpent/snake"); return CHARGE; }
p[iy]thons? { mkNode( E_CHARGE, "serpent/pithon"); return CHARGE; }
bisciones? { mkNode( E_CHARGE, "serpent/serpent-vorant-a-child"); return CHARGE; }
   // waterfowl
?(magellan|barnacle){S}g(oo|ee)se { mkNode( E_CHARGE, "bird/goose"); return CHARGE; }
?white{S}(smew|nun) { mkNode( E_CHARGE, "bird/smew"); return CHARGE; }
sheldrakes { mkNode( E_CHARGE, "bird/sheldrake"); return CHARGE; }
shoveller { mkNode( E_CHARGE, "bird/shoveller"); return CHARGE; }
cygnets? { mkNode( E_CHARGE, "bird/cygnet"); return CHARGE; }
herons? { mkNode( E_CHARGE, "bird/crane"); return CHARGE; }
swans? { mkNode( E_CHARGE, "bird/swan"); return CHARGE; }
ducks? { mkNode( E_CHARGE, "bird/duck"); return CHARGE; }
   // raptors
(all?erion|erne|eaglet)?s? { mkNode( E_CHARGE, "hawking/alerion"); return CHARGE; }
(marlion|falcon|hawk|goshawk)s? { mkNode( E_CHARGE, "hawking/falcon"); return CHARGE; }
sparrow{S}hawks? { mkNode( E_CHARGE, "hawking/falcon"); return CHARGE; }
imperial{S}eagles? { mkNode( E_CHARGE, "hawking/imperial-eagle"); return CHARGE; }
eagles? { mkNode( E_CHARGE, "hawking/eagle"); return CHARGE; }
?hawks?{S}lures? { mkNode( E_CHARGE, "hawking/hawk-lure"); return CHARGE; }
hawks?{S}bells? { mkNode( E_CHARGE, "hawking/hawkbell"); return CHARGE; }
hawkbells? { mkNode( E_CHARGE, "hawking/hawkbell"); return CHARGE; }
   // badges
badges?{S}of{S}clan{S}ross { mkNode( E_CHARGE, "badges/clan-ross"); return CHARGE; }
   // sea{S}birds
bitterns? { mkNode( E_CHARGE, "seabird/bittern"); return CHARGE; }
liver{S}bird { mkNode( E_CHARGE, "seabird/cormorant"); return CHARGE; }
(sea|tern){S}(mew|gull|fowl|pewit)s? { mkNode( E_CHARGE, "seabird/seagull"); return CHARGE; }
(sea|tern)(mew|gull|fowl|pewit)s? { mkNode( E_CHARGE, "seabird/seagull"); return CHARGE; }
gulls? { mkNode( E_CHARGE, "seabird/seagull"); return CHARGE; }
penguins? { mkNode( E_CHARGE, "seabird/penguin"); return CHARGE; }
?sea{S}(cormorant|aylet|gannapie)s? { mkNode( E_CHARGE, "seabird/cormorant"); return CHARGE; }
   // bird
?birds{S}nests? { mkNode( E_CHARGE, "bird/bird-nest"); return CHARGE; }
wings? { mkNode( E_CHARGE, "bird/wing"); return CHARGE; }
vols? { mkNode( E_CHARGE, "bird/wing-pair-2"); return CHARGE; }
feathers? { mkNode( E_CHARGE, "bird/feather"); return CHARGE; }
starlings? { mkNode( E_CHARGE, "bird/starling"); return CHARGE; }
larks? { mkNode( E_CHARGE, "bird/lark"); return CHARGE; }
quails? { mkNode( E_CHARGE, "bird/quail"); return CHARGE; }
bats? { mkNode( E_CHARGE, "bird/bat"); return CHARGE; }
(rere|flitter)(mouse|mice) { mkNode( E_CHARGE, "bird/bat"); return CHARGE; }
(rere|flitter){S}(mouse|mice) { mkNode( E_CHARGE, "bird/bat"); return CHARGE; }
?great{S}auks? { mkNode( E_CHARGE, "bird/auk"); return CHARGE; }
robins?{S}?redbreasts? { mkNode( E_CHARGE, "bird/robin"); return CHARGE; }
owls? { mkNode( E_CHARGE, "bird/owl"); return CHARGE; }
vultures? { mkNode( E_CHARGE, "bird/vulture"); return CHARGE; }
?cornish{S}choughs? { mkNode( E_CHARGE, "bird/chough"); return CHARGE; }
sea{S}swallows? { mkNode( E_CHARGE, "bird/chough"); return CHARGE; }
swallows? { mkNode( E_CHARGE, "bird/swallow"); return CHARGE; }
cranes? { mkNode( E_CHARGE, "bird/crane"); return CHARGE; }
(crow|corbie|daw|rook)s? { mkNode( E_CHARGE, "bird/crow"); return CHARGE; }
ravens? { mkNode( E_CHARGE, "bird/raven"); return CHARGE; }
(colomb|dove)s? { mkNode( E_CHARGE, "bird/dove"); return CHARGE; }
stock{S}doves? { mkNode( E_CHARGE, "bird/dove"); return CHARGE; }
moorcocks? { mkNode( E_CHARGE, "bird/moorcock"); return CHARGE; }
m[ea]rtlett?e?s? { mkNode( E_CHARGE, "bird/martlett"); return CHARGE; }
merlions? { mkNode( E_CHARGE, "bird/martlett"); return CHARGE; }
(peacock|pawne)s? { mkNode( E_CHARGE, "bird/peacock"); return CHARGE; }
pelicans? { mkNode( E_CHARGE, "bird/pelican"); return CHARGE; }
(papegay|popp?injay)s? { mkNode( E_CHARGE, "bird/popinjay"); return CHARGE; }
ostriche?s? { mkNode( E_CHARGE, "bird/ostrich"); return CHARGE; }
ostriche?s?{S}feathers? { mkNode( E_CHARGE, "bird/ostrich-feather"); return CHARGE; }
swallows? { mkNode( E_CHARGE, "bird/swallow"); return CHARGE; }
storks? { mkNode( E_CHARGE, "bird/stork"); return CHARGE; }
rocs? { mkNode( E_CHARGE, "bird/roc"); return CHARGE; }
parrots? { mkNode( E_CHARGE, "bird/parrot"); return CHARGE; }
nightingales? { mkNode( E_CHARGE, "bird/nightingale"); return CHARGE; }
magpies? { mkNode( E_CHARGE, "bird/magpie"); return CHARGE; }
(chaffinche?|pinson)s? { mkNode( E_CHARGE, "bird/chaffinch"); return CHARGE; }
bull?finche?s? { mkNode( E_CHARGE, "bird/bullfinch"); return CHARGE; }
blackbirds? { mkNode( E_CHARGE, "bird/blackbird"); return CHARGE; }
?black{S}birds? { mkNode( E_CHARGE, "bird/blackbird"); return CHARGE; }{S}// generic{S}bird
(snipe|curlew|avocetta)s? { mkNode( E_CHARGE, "bird/snipe"); return CHARGE; }
   // swords
kni[fv]es? { mkNode( E_CHARGE, "sword/knife"); return CHARGE; }
misericordes? { mkNode( E_CHARGE, "sword/knife"); return CHARGE; }
claymores? { mkNode( E_CHARGE, "sword/claymore"); return CHARGE; }
?rondel{S}daggers? { mkNode( E_CHARGE, "sword/dagger"); return CHARGE; }
dirks? { mkNode( E_CHARGE, "sword/dagger"); return CHARGE; }
ske[ia]ne?s? { mkNode( E_CHARGE, "sword/dagger"); return CHARGE; }
falchions? { mkNode( E_CHARGE, "sword/falchion"); return CHARGE; }
rapiers? { mkNode( E_CHARGE, "sword/rapier"); return CHARGE; }
sabres? { mkNode( E_CHARGE, "sword/sabre"); return CHARGE; }
crooked{S}swords? { mkNode( E_CHARGE, "sword/sabre"); return CHARGE; }
scim(i|e)tars? { mkNode( E_CHARGE, "sword/sabre"); return CHARGE; }
cutlasse?s? { mkNode( E_CHARGE, "sword/sabre"); return CHARGE; }
seaxe?s? { mkNode( E_CHARGE, "sword/seax"); return CHARGE; }
hilts? { mkNode( E_CHARGE, "sword/hilt"); return CHARGE; }
swords?{S}of{S}(st|saint){S}paul { mkNode( E_CHARGE, "sword/swordstpaul"); return CHARGE; }
(2|two){S}handed{S}swords? { mkNode( E_CHARGE, "sword/arming-sword"); return CHARGE; }
?arming{S}swords? { mkNode( E_CHARGE, "sword/arming-sword"); return CHARGE; }{S}// default{S}sword
   // hand{S}projectile{S}weapons
(musket|pistol|potgun)s? { mkNode( E_CHARGE, "projectile/musket"); return CHARGE; }
pot{S}guns? { mkNode( E_CHARGE, "projectile/musket"); return CHARGE; }
darts? { mkNode( E_CHARGE, "projectile/dart"); return CHARGE; }
chaine?{S}shots? { mkNode( E_CHARGE, "projectile/chaine-shot"); return CHARGE; }
tridents? { mkNode( E_CHARGE, "projectile/trident"); return CHARGE; }
sling{S}shots? { mkNode( E_CHARGE, "projectile/slingshot"); return CHARGE; }
slingshots? { mkNode( E_CHARGE, "projectile/slingshot"); return CHARGE; }
javelins? { mkNode( E_CHARGE, "projectile/javelin"); return CHARGE; }
(quarrel|arrow)s? { mkNode( E_CHARGE, "projectile/arrow"); return CHARGE; }
b(e|o)sons? { mkNode( E_CHARGE, "projectile/boson"); return CHARGE; }
bird{S}bolts? { mkNode( E_CHARGE, "projectile/boson"); return CHARGE; }
(f|ph)eons? { mkNode( E_CHARGE, "projectile/pheon"); return CHARGE; }
(lance|spear)s? { mkNode( E_CHARGE, "projectile/spear"); return CHARGE; }
broad{S}arrows? { mkNode( E_CHARGE, "projectile/arrow-broad"); return CHARGE; }
salmon{S}spears? { mkNode( E_CHARGE, "projectile/salmon-spear"); return CHARGE; }
   // heavy{S}weapons
(field|chamber){S}pieces? { mkNode( E_CHARGE, "weapon/cannon"); return CHARGE; }
(culverin|gun|chamber|cannon)s? { mkNode( E_CHARGE, "weapon/cannon"); return CHARGE; }
(swee?pe?|balista|mangonel)s? { mkNode( E_CHARGE, "weapon/balista"); return CHARGE; }
battering{S}rams? { mkNode( E_CHARGE, "weapon/battering-ram"); return CHARGE; }
tilting{S}(lance|spear)s? { mkNode( E_CHARGE, "weapon/tilting-spear"); return CHARGE; }
   // other{S}weapons
truncheons? { mkNode( E_CHARGE, "weapon/truncheon"); return CHARGE; }
?ukrainian{S}trident{S}heads? { mkNode( E_CHARGE, "weapon/trident-head-ukrainian"); return CHARGE; }
maces? { mkNode( E_CHARGE, "weapon/mace"); return CHARGE; }
?(long|string){S}bows? { mkNode( E_CHARGE, "weapon/bow"); return CHARGE; }
(g|c)altraps? { mkNode( E_CHARGE, "weapon/caltrap"); return CHARGE; }
cheval{S}traps? { mkNode( E_CHARGE, "weapon/caltrap"); return CHARGE; }
?spiked{S}clubs? { mkNode( E_CHARGE, "weapon/club"); return CHARGE; }
cronels? { mkNode( E_CHARGE, "weapon/cronel"); return CHARGE; }
crossbows? { mkNode( E_CHARGE, "weapon/crossbow"); return CHARGE; }
(staff|bourdon)s? { mkNode( E_CHARGE, "weapon/staff"); return CHARGE; }
ragged{S}staffs? { mkNode( E_CHARGE, "weapon/staff-ragged"); return CHARGE; }
wreathed{S}staffs? { mkNode( E_CHARGE, "weapon/staff-wreathed"); return CHARGE; }
arba?l[ea]sts? { mkNode( E_CHARGE, "weapon/crossbow"); return CHARGE; }
bourdons? { mkNode( E_CHARGE, "weapon/staff-palmer"); return CHARGE; }
palmers{S}staffs? { mkNode( E_CHARGE, "weapon/staff-palmer"); return CHARGE; }
[ck]atherine{S}wheels? { mkNode( E_CHARGE, "weapon/catherine-wheel"); return CHARGE; }
sword{S}chapes? { mkNode( E_CHARGE, "weapon/sword-chape"); return CHARGE; }
thors{S}hammers? { mkNode( E_CHARGE, "weapon/thors-hammer"); return CHARGE; }
mjolnirs? { mkNode( E_CHARGE, "weapon/thors-hammer"); return CHARGE; }
shackles? { mkNode( E_CHARGE, "weapon/shackle"); return CHARGE; }
   // tools
(barnacles|brey)s? { mkNode( E_CHARGE, "tools/brey"); return CHARGE; }
(fetter|pad)locks? { mkNode( E_CHARGE, "tools/padlock"); return CHARGE; }
(flea?g?me?|lancet)s? { mkNode( E_CHARGE, "tools/fleam"); return CHARGE; }
(hammer|martell)s? { mkNode( E_CHARGE, "tools/hammer"); return CHARGE; }
(set|carpenter|joiner|mason)s?{S}squares? { mkNode( E_CHARGE, "tools/set-square"); return CHARGE; }
(spade|shovel)s?{S}?irons? { mkNode( E_CHARGE, "tools/spade"); return CHARGE; }
digging{S}(iron|spade|shovel)s? { mkNode( E_CHARGE, "tools/spade"); return CHARGE; }
?hand{S}barrows? { mkNode( E_CHARGE, "tools/barrow"); return CHARGE; }
?scaling{S}ladders? { mkNode( E_CHARGE, "tools/ladder"); return CHARGE; }
?sets?{S}?of{S}(balanc|scal)es? { mkNode( E_CHARGE, "tools/scales"); return CHARGE; }
?smiths{S}anvils? { mkNode( E_CHARGE, "tools/anvil"); return CHARGE; }
?tailors{S}bodkins? { mkNode( E_CHARGE, "tools/bodkin"); return CHARGE; }
?wood{S}bills? { mkNode( E_CHARGE, "tools/billhook"); return CHARGE; }
angles { mkNode( E_CHARGE, "tools/angles"); return CHARGE; }
calipers { mkNode( E_CHARGE, "tools/calipers"); return CHARGE; }
astrolabes? { mkNode( E_CHARGE, "tools/astrolabe"); return CHARGE; }
awls? { mkNode( E_CHARGE, "tools/awl"); return CHARGE; }
hoes? { mkNode( E_CHARGE, "tools/hoe"); return CHARGE; }
bills?{S}?hooks? { mkNode( E_CHARGE, "tools/billhook"); return CHARGE; }
billhooks? { mkNode( E_CHARGE, "tools/billhook"); return CHARGE; }
brackets? { mkNode( E_CHARGE, "tools/bracket"); return CHARGE; }
cables? { mkNode( E_CHARGE, "tools/cable"); return CHARGE; }
chains? { mkNode( E_CHARGE, "tools/chain"); return CHARGE; }
compass(es)? { mkNode( E_CHARGE, "tools/compass"); return CHARGE; }
fers?{S}de{S}molines? { mkNode( E_CHARGE, "tools/millrind"); return CHARGE; }
flax{S}breakers? { mkNode( E_CHARGE, "tools/hemp-break"); return CHARGE; }
flails? { mkNode( E_CHARGE, "tools/flail"); return CHARGE; }
flo(at|te)s? { mkNode( E_CHARGE, "tools/float"); return CHARGE; }
forge{S}hammers? { mkNode( E_CHARGE, "tools/forge-hammer"); return CHARGE; }
sledge{S}hammers? { mkNode( E_CHARGE, "tools/sledge-hammer"); return CHARGE; }
grappling{S}irons? { mkNode( E_CHARGE, "tools/grappling-iron"); return CHARGE; }
hackles? { mkNode( E_CHARGE, "tools/hemp-break"); return CHARGE; }
hemp{S}(break|bracke)s? { mkNode( E_CHARGE, "tools/hemp-break"); return CHARGE; }
ink{S}moline { mkNode( E_CHARGE, "tools/millrind"); return CHARGE; }
keys? { mkNode( E_CHARGE, "tools/key"); return CHARGE; }
staples? { mkNode( E_CHARGE, "tools/staple"); return CHARGE; }
mallets? { mkNode( E_CHARGE, "tools/mallet"); return CHARGE; }
mill{S}(rind|iron)s? { mkNode( E_CHARGE, "tools/millrind"); return CHARGE; }
mill(rind|iron)s? { mkNode( E_CHARGE, "tools/millrind"); return CHARGE; }
nails? { mkNode( E_CHARGE, "tools/nail"); return CHARGE; }
scythes? { mkNode( E_CHARGE, "tools/scythe"); return CHARGE; }
mattocks? { mkNode( E_CHARGE, "tools/mattock"); return CHARGE; }
shac?k(le)?{S}bolts? { mkNode( E_CHARGE, "tools/shacklebolt"); return CHARGE; }
shac?k(le)?bolts? { mkNode( E_CHARGE, "tools/shacklebolt"); return CHARGE; }
soldering{S}irons? { mkNode( E_CHARGE, "tools/soldering-iron"); return CHARGE; }
stone{S}bills? { mkNode( E_CHARGE, "tools/wedge"); return CHARGE; }
wedges? { mkNode( E_CHARGE, "tools/wedge"); return CHARGE; }
woodbills? { mkNode( E_CHARGE, "tools/billhook"); return CHARGE; }
cramp(oon)?s? { mkNode( E_CHARGE, "tools/cramp"); return CHARGE; }
cramp{S}irons? { mkNode( E_CHARGE, "tools/cramp"); return CHARGE; }
crampirons? { mkNode( E_CHARGE, "tools/cramp"); return CHARGE; }
wolf{S}irons? { mkNode( E_CHARGE, "tools/wolfiron"); return CHARGE; }
wolfirons? { mkNode( E_CHARGE, "tools/wolfiron"); return CHARGE; }
plummets? { mkNode( E_CHARGE, "tools/plummet"); return CHARGE; }
plumbobs? { mkNode( E_CHARGE, "tools/plummet"); return CHARGE; }
trestles? { mkNode( E_CHARGE, "tools/trestle"); return CHARGE; }
   // fish
(turbot|sole|flook|flounder|bret|birt|carter)(fish)?s?{S}?fish { mkNode( E_CHARGE, "fish/turbot"); return CHARGE; }
cod(fishes)?{S}?fish(es)? { mkNode( E_CHARGE, "fish/codfish"); return CHARGE; }
fish(es)? { mkNode( E_CHARGE, "fish/fish"); return CHARGE; }
(luce|ged)s? { mkNode( E_CHARGE, "fish/luce"); return CHARGE; }
luc(y|ies) { mkNode( E_CHARGE, "fish/luce"); return CHARGE; }
barbels? { mkNode( E_CHARGE, "fish/barbel"); return CHARGE; }
sharks? { mkNode( E_CHARGE, "fish/shark"); return CHARGE; }
eels? { mkNode( E_CHARGE, "fish/eel"); return CHARGE; }
herrings? { mkNode( E_CHARGE, "fish/herring"); return CHARGE; }
carps? { mkNode( E_CHARGE, "fish/carp"); return CHARGE; }
chabots? { mkNode( E_CHARGE, "fish/chabot"); return CHARGE; }
goldfishe?s? { mkNode( E_CHARGE, "fish/goldfish"); return CHARGE; }
catfishe?s? { mkNode( E_CHARGE, "fish/catfish"); return CHARGE; }
(salmon|trout) { mkNode( E_CHARGE, "fish/salmon"); return CHARGE; }
?sea{S}pyes? { mkNode( E_CHARGE, "fish/pye"); return CHARGE; }{S}// as{S}in{S}ABBENDON
roache?s? { mkNode( E_CHARGE, "fish/roach"); return CHARGE; }
whales? { mkNode( E_CHARGE, "fish/whale"); return CHARGE; }
killer{S}whales? { mkNode( E_CHARGE, "fish/killer-whale"); return CHARGE; }
orcas? { mkNode( E_CHARGE, "fish/killer-whale"); return CHARGE; }
dolphins? { mkNode( E_CHARGE, "fish/dolphin"); return CHARGE; }{S}
   // sea{S}life
e?scallops?{S}?shells? { mkNode( E_CHARGE, "sealife/scallop"); return CHARGE; }
clams?{S}?shells? { mkNode( E_CHARGE, "sealife/scallop"); return CHARGE; }
co(ckle|quel)?{S}?shells? { mkNode( E_CHARGE, "sealife/scallop"); return CHARGE; }
whelks?{S}?shells? { mkNode( E_CHARGE, "sealife/whelk"); return CHARGE; }
(lobster|crevice)s? { mkNode( E_CHARGE, "sealife/lobster"); return CHARGE; }
shrimps? { mkNode( E_CHARGE, "sealife/shrimp"); return CHARGE; }
hippocamp(i|us) { mkNode( E_CHARGE, "sealife/sea-horse-natural"); return CHARGE; }
sea{S}horse { mkNode( E_CHARGE, "sealife/sea-horse"); return CHARGE; }
crabs? { mkNode( E_CHARGE, "sealife/crab"); return CHARGE; }
tritons?{S}(shell|trumpet)s? { mkNode( E_CHARGE, "sealife/triton-trumpet"); return CHARGE; }
seals? { mkNode( E_CHARGE, "sealife/seal"); return CHARGE; }
calamaries? { mkNode( E_CHARGE, "sealife/calamarie"); return CHARGE; }
manatees? { mkNode( E_CHARGE, "sealife/manatee"); return CHARGE; }
polypuse?s? { mkNode( E_CHARGE, "sealife/polypus"); return CHARGE; }
sea{S}urchins? { mkNode( E_CHARGE, "sealife/urchin-sea"); return CHARGE; }
sea{S}tortoise? { mkNode( E_CHARGE, "sealife/sea-tortoise"); return CHARGE; }
turtles? { mkNode( E_CHARGE, "sealife/turtle"); return CHARGE; }
sword{S}fish(es)? { mkNode( E_CHARGE, "sealife/swordfish"); return CHARGE; }
swordfish(es)? { mkNode( E_CHARGE, "sealife/swordfish"); return CHARGE; }
   // mythical{S}sea{S}life
sea{S}dog? { mkNode( E_CHARGE, "sealife/sea-dog"); return CHARGE; }
lions?{S}poissons? { mkNode( E_CHARGE, "sealife/sea-lion"); return CHARGE; }
sea{S}lions? { mkNode( E_CHARGE, "sealife/sea-lion"); return CHARGE; }
sea{S}horses? { mkNode( E_CHARGE, "sealife/sea-horse"); return CHARGE; }
sea{S}goats? { mkNode( E_CHARGE, "sealife/sea-goat"); return CHARGE; }
sea{S}dragons? { mkNode( E_CHARGE, "sealife/sea-dragon"); return CHARGE; }
sea{S}serpents? { mkNode( E_CHARGE, "sealife/sea-serpent"); return CHARGE; }
sea{S}wol(f|ves) { mkNode( E_CHARGE, "sealife/sea-wolf"); return CHARGE; }
seawol(f|ves) { mkNode( E_CHARGE, "sealife/sea-wolf"); return CHARGE; }
   // helmets
?knights{S}helm(et)?s? { mkNode( E_CHARGE, "armour/helmet-knight"); return CHARGE; }
morions? { mkNode( E_CHARGE, "armour/morion"); return CHARGE; }
mail{S}shirts? { mkNode( E_CHARGE, "armour/mail-shirt"); return CHARGE; }
shirts?{S}of{S}mail { mkNode( E_CHARGE, "armour/mail-shirt"); return CHARGE; }
(cam|avent)ails? { mkNode( E_CHARGE, "armour/camail"); return CHARGE; }
steel{S}caps? { mkNode( E_CHARGE, "armour/morion"); return CHARGE; }
caps?{S}of{S}steel { mkNode( E_CHARGE, "armour/morion"); return CHARGE; }
bas([sc]i)?nets? { mkNode( E_CHARGE, "armour/morion"); return CHARGE; }
heaumes? { mkNode( E_CHARGE, "armour/helmet-knight"); return CHARGE; }
esquires?{S}helm(et)?s? { mkNode( E_CHARGE, "armour/helmet-esquire"); return CHARGE; }
coif{S}de{S}mailles { mkNode( E_CHARGE, "armour/hood"); return CHARGE; }
burgonett?e?s? { mkNode( E_CHARGE, "armour/burgonet"); return CHARGE; }
   // armour
cou(te|diere)s? { mkNode( E_CHARGE, "armour/coute"); return CHARGE; }
garde{S}bras { mkNode( E_CHARGE, "armour/coute"); return CHARGE; }
chamfrons? { mkNode( E_CHARGE, "armour/chamfron"); return CHARGE; }
(cuirass|breastplat)e?s? { mkNode( E_CHARGE, "armour/cuirass"); return CHARGE; }
(coute|coudiere)s? { mkNode( E_CHARGE, "armour/coutes"); return CHARGE; }
cuisses { mkNode( E_CHARGE, "armour/cuisses"); return CHARGE; }
epaulieres? { mkNode( E_CHARGE, "armour/epaulieres"); return CHARGE; }
genouillieres { mkNode( E_CHARGE, "armour/genouillieres"); return CHARGE; }
gorgets? { mkNode( E_CHARGE, "armour/gorget"); return CHARGE; }
guiges? { mkNode( E_CHARGE, "armour/guige"); return CHARGE; }
ha(u|w)berks? { mkNode( E_CHARGE, "armour/hawberk"); return CHARGE; }
gauntlets? { mkNode( E_CHARGE, "armour/gauntlet"); return CHARGE; }
(es)?carbuncles? { mkNode( E_CHARGE, "armour/carbuncle"); return CHARGE; }
charbocles? { mkNode( E_CHARGE, "armour/carbuncle"); return CHARGE; }
banners? { mkNode( E_CHARGE, "armour/banner"); return CHARGE; }
(bou?teroll|scabbard)s { mkNode( E_CHARGE, "armour/scabbard"); return CHARGE; }
   //tack
?spur{S}(rouelle|rowel|molet)s? { mkNode( E_CHARGE, "tack/rowel"); return CHARGE; }
stirrups? { mkNode( E_CHARGE, "tack/stirrup"); return CHARGE; }
spurs? { mkNode( E_CHARGE, "tack/spur"); return CHARGE; }
(horseshoe|ferr)s? { mkNode( E_CHARGE, "tack/horseshoe"); return CHARGE; }
saddles? { mkNode( E_CHARGE, "tack/saddle"); return CHARGE; }
   // named-roundel
gastells? { mkNode( E_CHARGE, "geometric/torteau"); return CHARGE; }
[sc]er[ui]ses? { mkNode( E_CHARGE, "geometric/torteau"); return CHARGE; }
(tale|beza)nts? { mkNode( E_CHARGE, "geometric/bezant"); return CHARGE; }
golpes? { mkNode( E_CHARGE, "geometric/golpe"); return CHARGE; }
wounds? { mkNode( E_CHARGE, "geometric/golpe"); return CHARGE; }
guzes? { mkNode( E_CHARGE, "geometric/guze"); return CHARGE; }
hurts? { mkNode( E_CHARGE, "geometric/hurt"); return CHARGE; }
oranges? { mkNode( E_CHARGE, "geometric/orange"); return CHARGE; }
pellets? { mkNode( E_CHARGE, "geometric/pellet"); return CHARGE; }
gunstones? { mkNode( E_CHARGE, "geometric/pellet"); return CHARGE; }
ogress(es)? { mkNode( E_CHARGE, "geometric/pellet"); return CHARGE; }
plates? { mkNode( E_CHARGE, "geometric/plate"); return CHARGE; }
pom[mi]es? { mkNode( E_CHARGE, "geometric/pomme"); return CHARGE; }
torteaux? { mkNode( E_CHARGE, "geometric/torteau"); return CHARGE; }
triskeles? { mkNode( E_CHARGE, "geometric/triskele"); return CHARGE; }
valknuts? { mkNode( E_CHARGE, "geometric/valknut"); return CHARGE; }
octagons? { mkNode( E_CHARGE, "geometric/octagon"); return CHARGE; }
   // quadrate
fylfots? { mkNode( E_CHARGE, "quadrate/fylfot"); return CHARGE; }
fylfots?{S}clubbed { mkNode( E_CHARGE, "quadrate/fylfot-clubbed"); return CHARGE; }
maltese{S}cross(let|lets|es)? { mkNode( E_CHARGE, "quadrate/maltese-cross"); return CHARGE; }
compass{S}roses? { mkNode( E_CHARGE, "quadrate/compass-rose"); return CHARGE; }
compass{S}stars? { mkNode( E_CHARGE, "quadrate/compass-star"); return CHARGE; }
novae? { mkNode( E_CHARGE, "quadrate/compass-rose"); return CHARGE; }
?plain{S}cross?lett?s? { mkNode( E_CHARGE, "quadrate/crosslet"); return CHARGE; }
cross?lett?s?{S}formy { mkNode( E_CHARGE, "quadrate/cross-formy"); return CHARGE; }
saltorels? { mkNode( E_CHARGE, "quadrate/saltorel"); return CHARGE; }
   // Norse{S}imagery
odins?{S}ravens? { mkNode( E_CHARGE, "norse/raven"); return CHARGE; }
norse{S}ravens? { mkNode( E_CHARGE, "norse/raven"); return CHARGE; }
?(norse|viking){S}long(ship|boat)s? { mkNode( E_CHARGE, "norse/longship"); return CHARGE; }
   // insect
snails? { mkNode( E_CHARGE, "insect/snail"); return CHARGE; }
(gad)?fl(ies|y) { mkNode( E_CHARGE, "insect/fly"); return CHARGE; }
silkworm{S}fl(y|ies) { mkNode( E_CHARGE, "insect/silkworm-fly"); return CHARGE; }
gadbees? { mkNode( E_CHARGE, "insect/gadbee"); return CHARGE; }
grasshoppers? { mkNode( E_CHARGE, "insect/grasshopper"); return CHARGE; }
ants? { mkNode( E_CHARGE, "insect/ant"); return CHARGE; }
bees? { mkNode( E_CHARGE, "insect/bee"); return CHARGE; }
butterfl(y|ies) { mkNode( E_CHARGE, "insect/butterfly"); return CHARGE; }
crickets? { mkNode( E_CHARGE, "insect/cricket"); return CHARGE; }
dragonfl(y|ie)s? { mkNode( E_CHARGE, "insect/dragonfly"); return CHARGE; }
hornets? { mkNode( E_CHARGE, "insect/hornet"); return CHARGE; }
wasps? { mkNode( E_CHARGE, "insect/wasp"); return CHARGE; }
spiders? { mkNode( E_CHARGE, "insect/spider"); return CHARGE; }
spiders?{S}webs? { mkNode( E_CHARGE, "insect/spiderweb"); return CHARGE; }
spiderwebs? { mkNode( E_CHARGE, "insect/spiderweb"); return CHARGE; }
beetles? { mkNode( E_CHARGE, "insect/beetle"); return CHARGE; }
stag{S}beetles? { mkNode( E_CHARGE, "insect/stag-beetle"); return CHARGE; }
stagbeetles? { mkNode( E_CHARGE, "insect/stag-beetle"); return CHARGE; }
   // trees{S}and{S}fruit
ashen{S}keys? { mkNode( E_CHARGE, "tree-fruit/ashen-key"); return CHARGE; }
mulberry? { mkNode( E_CHARGE, "tree-fruit/mulberry"); return CHARGE; }
pumpkins? { mkNode( E_CHARGE, "tree-fruit/pumpkin"); return CHARGE; }
walnuts? { mkNode( E_CHARGE, "tree-fruit/walnut"); return CHARGE; }
planes? { mkNode( E_CHARGE, "tree-fruit/plane"); return CHARGE; }
beeche?s? { mkNode( E_CHARGE, "tree-fruit/beech"); return CHARGE; }
lindens? { mkNode( E_CHARGE, "tree-fruit/linden"); return CHARGE; }
laurels? { mkNode( E_CHARGE, "tree-fruit/laurel"); return CHARGE; }
hazelnuts? { mkNode( E_CHARGE, "tree-fruit/hazelnut"); return CHARGE; }
strawberr(y|ies) { mkNode( E_CHARGE, "tree-fruit/strawberry"); return CHARGE; }
barberry? { mkNode( E_CHARGE, "tree-fruit/barberry"); return CHARGE; }
maples? { mkNode( E_CHARGE, "tree-fruit/maple"); return CHARGE; }
bays? { mkNode( E_CHARGE, "tree-fruit/bay"); return CHARGE; }
holl(y|ies) { mkNode( E_CHARGE, "tree-fruit/holly"); return CHARGE; }
elders? { mkNode( E_CHARGE, "tree-fruit/elder"); return CHARGE; }
willows? { mkNode( E_CHARGE, "tree-fruit/willow"); return CHARGE; }
(cypress|cedar) { mkNode( E_CHARGE, "tree-fruit/cedar"); return CHARGE; }
apples? { mkNode( E_CHARGE, "tree-fruit/apple"); return CHARGE; }
birch(es)? { mkNode( E_CHARGE, "tree-fruit/birch"); return CHARGE; }
pomegranates? { mkNode( E_CHARGE, "tree-fruit/pomegranate"); return CHARGE; }
almond { mkNode( E_CHARGE, "tree-fruit/almond"); return CHARGE; }
?mountain{S}(rowan|rodey|ash) { mkNode( E_CHARGE, "tree-fruit/ash"); return CHARGE; }
hazel { mkNode( E_CHARGE, "tree-fruit/hazel"); return CHARGE; }
palm { mkNode( E_CHARGE, "tree-fruit/palm"); return CHARGE; }
palmtree { mkNode( E_CHARGE, "tree-fruit/palm"); return CHARGE; }
cherr(y|ies) { mkNode( E_CHARGE, "tree-fruit/cherry"); return CHARGE; }
whitethorns? { mkNode( E_CHARGE, "tree-fruit/whitethorn"); return CHARGE; }
alderberr(y|ies) { mkNode( E_CHARGE, "tree-fruit/alderberry"); return CHARGE; }
alders? { mkNode( E_CHARGE, "tree-fruit/alder-tree"); return CHARGE; }
aspens? { mkNode( E_CHARGE, "tree-fruit/aspen"); return CHARGE; }
cypress { mkNode( E_CHARGE, "tree-fruit/cypress"); return CHARGE; }
chestnuts? { mkNode( E_CHARGE, "tree-fruit/chestnut"); return CHARGE; }
conkers? { mkNode( E_CHARGE, "tree-fruit/conker"); return CHARGE; }
horse{S}chestnut{S}fruits? { mkNode( E_CHARGE, "tree-fruit/conker"); return CHARGE; }
firs? { mkNode( E_CHARGE, "tree-fruit/fir"); return CHARGE; }
figs? { mkNode( E_CHARGE, "tree-fruit/fig"); return CHARGE; }
pines? { mkNode( E_CHARGE, "tree-fruit/pine"); return CHARGE; }
pinecones? { mkNode( E_CHARGE, "tree-fruit/pine-cone"); return CHARGE; }
pine{S}cones? { mkNode( E_CHARGE, "tree-fruit/pine-cone"); return CHARGE; }
trees? { mkNode( E_CHARGE, "tree-fruit/tree"); return CHARGE; }
(stock|trunk)s?{S}of{S}?a{S}trees? { mkNode( E_CHARGE, "tree-fruit/trunk"); return CHARGE; }
(bough|branche?|scrog)s? { mkNode( E_CHARGE, "tree-fruit/branch"); return CHARGE; }
oaktrees? { mkNode( E_CHARGE, "tree-fruit/oak"); return CHARGE; }
oaks? { mkNode( E_CHARGE, "tree-fruit/oak"); return CHARGE; }
yews? { mkNode( E_CHARGE, "tree-fruit/yew"); return CHARGE; }
?china{S}cokar { mkNode( E_CHARGE, "tree-fruit/cokar"); return CHARGE; }
pears? { mkNode( E_CHARGE, "tree-fruit/pear"); return CHARGE; }
lemons? { mkNode( E_CHARGE, "tree-fruit/lemon"); return CHARGE; }
olives? { mkNode( E_CHARGE, "tree-fruit/olive"); return CHARGE; }
limes? { mkNode( E_CHARGE, "tree-fruit/lime"); return CHARGE; }
banana{S}stems? { mkNode( E_CHARGE, "tree-fruit/banana-stem"); return CHARGE; }
stems?{S}of{S}bananas? { mkNode( E_CHARGE, "tree-fruit/banana-stem"); return CHARGE; }
hop{S}cones? { mkNode( E_CHARGE, "tree-fruit/hop-cone"); return CHARGE; }
marijuana { mkNode( E_CHARGE, "tree-fruit/marijuana"); return CHARGE; }
chrysanthemum { mkNode( E_CHARGE, "tree-fruit/chrysanthemum"); return CHARGE; }
(leaf|leaves|slips?) { mkNode( E_CHARGE, "tree-fruit/oak-leaf"); return CHARGE; }
   // flowers
foxgloves? { mkNode( E_CHARGE, "flower/foxglove"); return CHARGE; }
trilliums?{S}?flowers? { mkNode( E_CHARGE, "flower/trillium"); return CHARGE; }
forget{S}me{S}nots? { mkNode( E_CHARGE, "flower/forget-me-not"); return CHARGE; }
stems?{S}of{S}?a{S}flowers? { mkNode( E_CHARGE, "flower/flower-stem"); return CHARGE; }
lil(y|ies) { mkNode( E_CHARGE, "flower/lily"); return CHARGE; }
jasmine{S}?flowers? { mkNode( E_CHARGE, "flower/jasmine"); return CHARGE; }
strawberry{S}flowers? { mkNode( E_CHARGE, "flower/strawberry-flower"); return CHARGE; }
strawberry{S}plants? { mkNode( E_CHARGE, "flower/strawberry-plant"); return CHARGE; }
(quintfoil|cinquefoil|frais)e?s? { mkNode( E_CHARGE, "flower/cinquefoil"); return CHARGE; }
columbines? { mkNode( E_CHARGE, "flower/columbine"); return CHARGE; }
(octo|eight)foile?s? { mkNode( E_CHARGE, "flower/octofoil"); return CHARGE; }
double{S}quatrefoile?s? { mkNode( E_CHARGE, "flower/octofoil"); return CHARGE; }
quatrefoile?s? { mkNode( E_CHARGE, "flower/quatrefoil"); return CHARGE; }
?damask{S}roses? { mkNode( E_CHARGE, "flower/rose"); return CHARGE; }
//   array{S}( 'natural{S}roses? { mkNode( E_CHARGE, "flower/rose-natural"); return CHARGE; }
s[ie]xfoile?s? { mkNode( E_CHARGE, "flower/sexfoil"); return CHARGE; }
angennes? { mkNode( E_CHARGE, "flower/sexfoil"); return CHARGE; }
shamrocks? { mkNode( E_CHARGE, "flower/shamrock"); return CHARGE; }
daffodils? { mkNode( E_CHARGE, "flower/daffodil"); return CHARGE; }
dandelions? { mkNode( E_CHARGE, "flower/dandelion"); return CHARGE; }
peon(y|ies)? { mkNode( E_CHARGE, "flower/peony"); return CHARGE; }
trefoile?s? { mkNode( E_CHARGE, "flower/trefoil"); return CHARGE; }
gillyflowers? { mkNode( E_CHARGE, "flower/gillyflower"); return CHARGE; }
sunflowers? { mkNode( E_CHARGE, "flower/sunflower"); return CHARGE; }
tudor{S}roses? { mkNode( E_CHARGE, "flower/rose-tudor"); return CHARGE; }
roses?{S}of{S}york { mkNode( E_CHARGE, "flower/rose-york"); return CHARGE; }
york(shire)?{S}roses? { mkNode( E_CHARGE, "flower/rose-york"); return CHARGE; }
roses?{S}of{S}lancaster { mkNode( E_CHARGE, "flower/rose-lancaster"); return CHARGE; }
lancaster{S}roses? { mkNode( E_CHARGE, "flower/rose-lancaster"); return CHARGE; }
rues?{S}?(flower|blossom)s? { mkNode( E_CHARGE, "flower/rue"); return CHARGE; }
(bluebottle|cornflower)s? { mkNode( E_CHARGE, "flower/cornflower"); return CHARGE; }
blue{S}bottles? { mkNode( E_CHARGE, "flower/cornflower"); return CHARGE; }
tulips? { mkNode( E_CHARGE, "flower/tulip"); return CHARGE; }
popp(y|ies) { mkNode( E_CHARGE, "flower/poppy"); return CHARGE; }
dais(y|ies) { mkNode( E_CHARGE, "flower/daisy"); return CHARGE; }
lotus{S}?(flower|blossom)s? { mkNode( E_CHARGE, "flower/lotus"); return CHARGE; }
   // other{S}plants
pine{S}apples? { mkNode( E_CHARGE, "plant/pineapple"); return CHARGE; }
bullrushe?s? { mkNode( E_CHARGE, "plant/bullrush"); return CHARGE; }
pineapples? { mkNode( E_CHARGE, "plant/pineapple"); return CHARGE; }
ears?{S}of{S}?big{S}(wheat|corn) { mkNode( E_CHARGE, "plant/wheat-ear"); return CHARGE; }
(wheat|corn) { mkNode( E_CHARGE, "plant/wheat"); return CHARGE; }
(wheat|corn){S}stalk { mkNode( E_CHARGE, "plant/wheat-stalk"); return CHARGE; }
?big{S}(wheat|corn){S}ears? { mkNode( E_CHARGE, "plant/wheat-ear"); return CHARGE; }
beans?{S}[pc]ods? { mkNode( E_CHARGE, "plant/beanpod"); return CHARGE; }
bean[pc]ods? { mkNode( E_CHARGE, "plant/beanpod"); return CHARGE; }
beans? { mkNode( E_CHARGE, "plant/bean"); return CHARGE; }
pepper{S}pods? { mkNode( E_CHARGE, "plant/pepper-pod"); return CHARGE; }
rye { mkNode( E_CHARGE, "plant/rye"); return CHARGE; }
iv(y|ies) { mkNode( E_CHARGE, "plant/ivy"); return CHARGE; }
ivy{S}vines? { mkNode( E_CHARGE, "plant/ivy-vine"); return CHARGE; }
ivy{S}wreaths? { mkNode( E_CHARGE, "plant/ivy-wreath"); return CHARGE; }
bet(ony|thune) { mkNode( E_CHARGE, "plant/betony"); return CHARGE; }
acorns? { mkNode( E_CHARGE, "plant/acorn"); return CHARGE; }
reeds? { mkNode( E_CHARGE, "plant/reed"); return CHARGE; }
garlic{S}?plants? { mkNode( E_CHARGE, "plant/garlic"); return CHARGE; }
thistles? { mkNode( E_CHARGE, "plant/thistle"); return CHARGE; }
balm { mkNode( E_CHARGE, "plant/balm"); return CHARGE; }
grapes? { mkNode( E_CHARGE, "plant/grape"); return CHARGE; }
turnips? { mkNode( E_CHARGE, "plant/turnip"); return CHARGE; }
cotton { mkNode( E_CHARGE, "plant/cotton"); return CHARGE; }
carrots? { mkNode( E_CHARGE, "plant/carrot"); return CHARGE; }
vines? { mkNode( E_CHARGE, "plant/vine"); return CHARGE; }
onions? { mkNode( E_CHARGE, "plant/onion"); return CHARGE; }
radishe?s? { mkNode( E_CHARGE, "plant/radish"); return CHARGE; }
leeks? { mkNode( E_CHARGE, "plant/leek"); return CHARGE; }
bush(es)? { mkNode( E_CHARGE, "plant/bush"); return CHARGE; }
acanthus { mkNode( E_CHARGE, "plant/acanthus"); return CHARGE; }
mushrooms? { mkNode( E_CHARGE, "plant/mushroom"); return CHARGE; }
bamboos?{S}?poles? { mkNode( E_CHARGE, "plant/bamboo"); return CHARGE; }
   // christian
rosar(y|ies) { mkNode( E_CHARGE, "christian/rosary"); return CHARGE; }
paternosters? { mkNode( E_CHARGE, "christian/rosary"); return CHARGE; }
tombstones? { mkNode( E_CHARGE, "christian/tombstone"); return CHARGE; }
cherub(im)?s? { mkNode( E_CHARGE, "christian/cherub"); return CHARGE; }
(paschal|holy){S}lambs? { mkNode( E_CHARGE, "christian/paschal-lamb"); return CHARGE; }
lambs?{S}of{S}god { mkNode( E_CHARGE, "christian/paschal-lamb"); return CHARGE; }
agnus{S}dei { mkNode( E_CHARGE, "christian/paschal-lamb"); return CHARGE; }
cro[s|z]iers? { mkNode( E_CHARGE, "christian/crozier"); return CHARGE; }
virgin{S}?mary{S}?(holding|and){S}?the{S}?child{S}?jesus{S}?in{S}?her{S}?arms { mkNode( E_CHARGE, "christian/virgin"); return CHARGE; }
madonna { mkNode( E_CHARGE, "christian/virgin"); return CHARGE; }
mitres? { mkNode( E_CHARGE, "christian/mitre"); return CHARGE; }
angels? { mkNode( E_CHARGE, "christian/angel"); return CHARGE; }
?(church|war){S}bells? { mkNode( E_CHARGE, "christian/church-bell"); return CHARGE; }
pastoral{S}staffs? { mkNode( E_CHARGE, "christian/staff-pastoral"); return CHARGE; }
altars? { mkNode( E_CHARGE, "christian/altar"); return CHARGE; }
passion{S}nails? { mkNode( E_CHARGE, "christian/passion-nail"); return CHARGE; }
   // architecture
well{S}frames? { mkNode( E_CHARGE, "architecture/well-frame"); return CHARGE; }
portcullis? { mkNode( E_CHARGE, "architecture/portcullis"); return CHARGE; }
?door{S}arch(es)? { mkNode( E_CHARGE, "architecture/arch"); return CHARGE; }
cogwheels? { mkNode( E_CHARGE, "architecture/cogwheel"); return CHARGE; }
(cog|clock){S}wheels? { mkNode( E_CHARGE, "architecture/cogwheel"); return CHARGE; }
gears?{S}?wheels? { mkNode( E_CHARGE, "architecture/cogwheel"); return CHARGE; }
mill{S}wheels? { mkNode( E_CHARGE, "architecture/millwheel"); return CHARGE; }
millwheels? { mkNode( E_CHARGE, "architecture/millwheel"); return CHARGE; }
towers? { mkNode( E_CHARGE, "architecture/tower"); return CHARGE; }
lighthouses? { mkNode( E_CHARGE, "architecture/lighthouse"); return CHARGE; }
pharose?s? { mkNode( E_CHARGE, "architecture/lighthouse"); return CHARGE; }
water{S}wheels? { mkNode( E_CHARGE, "architecture/waterwheel"); return CHARGE; }
waterwheels? { mkNode( E_CHARGE, "architecture/waterwheel"); return CHARGE; }
gates? { mkNode( E_CHARGE, "architecture/gate"); return CHARGE; }
gate(way|house)s? { mkNode( E_CHARGE, "architecture/gatehouse"); return CHARGE; }
fountains? { mkNode( E_CHARGE, "architecture/fountain"); return CHARGE; }
wells? { mkNode( E_CHARGE, "architecture/well"); return CHARGE; }
bridges? { mkNode( E_CHARGE, "architecture/bridge"); return CHARGE; }
castles? { mkNode( E_CHARGE, "architecture/castle"); return CHARGE; }
church(es)?{S}?with{S}?a{S}?spires? { mkNode( E_CHARGE, "architecture/church"); return CHARGE; }
(column|pillar)s? { mkNode( E_CHARGE, "architecture/pillar"); return CHARGE; }
pyramids? { mkNode( E_CHARGE, "architecture/pyramid"); return CHARGE; }
?quadrate{S}cornices? { mkNode( E_CHARGE, "architecture/cornice"); return CHARGE; }
anilles? { mkNode( E_CHARGE, "architecture/anille"); return CHARGE; }
bascules? { mkNode( E_CHARGE, "architecture/bascule"); return CHARGE; }
pavill?ions? { mkNode( E_CHARGE, "architecture/pavilion"); return CHARGE; }
tents? { mkNode( E_CHARGE, "architecture/pavilion"); return CHARGE; }
pennons? { mkNode( E_CHARGE, "architecture/pennon"); return CHARGE; }
penn?ants? { mkNode( E_CHARGE, "architecture/pennon"); return CHARGE; }
fountain{S}stones? { mkNode( E_CHARGE, "architecture/fountain-stone"); return CHARGE; }
   // geometric

   // axe
lochaber{S}axes? { mkNode( E_CHARGE, "axe/lochaber-axe"); return CHARGE; }
pole{S}axes? { mkNode( E_CHARGE, "axe/pole-axe"); return CHARGE; }
(poleaxe|halbert)s? { mkNode( E_CHARGE, "axe/pole-axe"); return CHARGE; }
addices? { mkNode( E_CHARGE, "axe/addice"); return CHARGE; }
carpenters?{S}axes? { mkNode( E_CHARGE, "axe/addice"); return CHARGE; }
battle{S}axes? { mkNode( E_CHARGE, "axe/battle-axe"); return CHARGE; }
battleaxes? { mkNode( E_CHARGE, "axe/battle-axe"); return CHARGE; }
?common{S}axes? { mkNode( E_CHARGE, "axe/common-axe"); return CHARGE; }
hatchets? { mkNode( E_CHARGE, "axe/common-axe"); return CHARGE; }
(miners|pick){S}axes? { mkNode( E_CHARGE, "axe/pick-axe"); return CHARGE; }
hews? { mkNode( E_CHARGE, "axe/pick-axe"); return CHARGE; }
turners?{S}axes? { mkNode( E_CHARGE, "axe/turner-axe"); return CHARGE; }
slaughter{S}axes? { mkNode( E_CHARGE, "axe/slaughter-axe"); return CHARGE; }
broad{S}axes? { mkNode( E_CHARGE, "axe/broad-axe"); return CHARGE; }
throwing{S}axes? { mkNode( E_CHARGE, "axe/throwing-axe"); return CHARGE; }
   // natural
(hill|hillock|mound|mount) { mkNode( E_CHARGE, "natural/hillock"); return CHARGE; }
mole{S}hills? { mkNode( E_CHARGE, "natural/mole-hill"); return CHARGE; }
molehills? { mkNode( E_CHARGE, "natural/mole-hill"); return CHARGE; }
water{S}bubbles? { mkNode( E_CHARGE, "natural/bubble"); return CHARGE; }
clouds? { mkNode( E_CHARGE, "natural/cloud"); return CHARGE; }
winds? { mkNode( E_CHARGE, "natural/wind"); return CHARGE; }
mistrals? { mkNode( E_CHARGE, "natural/wind"); return CHARGE; }
stones? { mkNode( E_CHARGE, "natural/stone"); return CHARGE; }
rocks? { mkNode( E_CHARGE, "natural/rock"); return CHARGE; }
flintstones? { mkNode( E_CHARGE, "natural/stone"); return CHARGE; }
flint{S}stones? { mkNode( E_CHARGE, "natural/stone-flint"); return CHARGE; }
lightning{S}bolts? { mkNode( E_CHARGE, "natural/lightning-bolt"); return CHARGE; }
bolts?{S}of{S}lightning { mkNode( E_CHARGE, "natural/lightning-bolt"); return CHARGE; }
snowflakes? { mkNode( E_CHARGE, "natural/snowflake"); return CHARGE; }
snow{S}flakes? { mkNode( E_CHARGE, "natural/snowflake"); return CHARGE; }
waves?{S}of{S}the{S}sea { mkNode( E_CHARGE, "natural/sea-waves"); return CHARGE; }
(hurst|grove|wood|forest)s?{S}?of{S}?trees { mkNode( E_CHARGE, "natural/forest"); return CHARGE; }
   // celestial
?full{S}moons? { mkNode( E_CHARGE, "celestial/moon"); return CHARGE; }
increscents? { mkNode( E_CHARGE, "celestial/moon-todexter"); return CHARGE; }
decrescents? { mkNode( E_CHARGE, "celestial/moon-tosinister"); return CHARGE; }
es?toill?e?s? { mkNode( E_CHARGE, "celestial/star"); return CHARGE; }
 {S}pointed{S}(star|es?toile?)s? { mkNode( E_CHARGE, "celestial/star"); return CHARGE; }
suns? { mkNode( E_CHARGE, "celestial/sun"); return CHARGE; }
suns?{S}rays? { mkNode( E_CHARGE, "celestial/sun-rays"); return CHARGE; }
?blazing{S}comets?{S}?stars? { mkNode( E_CHARGE, "celestial/comet"); return CHARGE; }
sunbursts? { mkNode( E_CHARGE, "celestial/sunburst"); return CHARGE; }
rainbows? { mkNode( E_CHARGE, "celestial/rainbow"); return CHARGE; }
?jupiters?{S}thunderbolts? { mkNode( E_CHARGE, "celestial/thunderbolt"); return CHARGE; }
   // clothes
?(antique|dutch|mens){S}(sham)?(brogue|brough|boot)s? { mkNode( E_CHARGE, "clothes/boot',{S}),
?electoral{S}bonnet { mkNode( E_CHARGE, "clothes/bonnet"); return CHARGE; }
?square{S}buckles? { mkNode( E_CHARGE, "clothes/buckle"); return CHARGE; }
belts? { mkNode( E_CHARGE, "clothes/belt"); return CHARGE; }
ferma(il|ux) { mkNode( E_CHARGE, "clothes/buckle"); return CHARGE; }
arming{S}buckles? { mkNode( E_CHARGE, "clothes/arming-buckle"); return CHARGE; }
caps?{S}?of{S}?dignity { mkNode( E_CHARGE, "clothes/cap-dignity"); return CHARGE; }
caps?{S}of{S}mercury { mkNode( E_CHARGE, "clothes/cap-mercury"); return CHARGE; }
caps?{S}of{S}?a{S}jesters? { mkNode( E_CHARGE, "clothes/cap-jester"); return CHARGE; }
jesters{S}caps? { mkNode( E_CHARGE, "clothes/cap-jester"); return CHARGE; }
ducipers? { mkNode( E_CHARGE, "clothes/cap-dignity"); return CHARGE; }
(chapeaux?|capelots?) { mkNode( E_CHARGE, "clothes/chapeau"); return CHARGE; }
caps?{S}of{S}(estate|maintenance) { mkNode( E_CHARGE, "clothes/chapeau"); return CHARGE; }
?gem{S}rings? { mkNode( E_CHARGE, "clothes/gem-ring"); return CHARGE; }
gloves? { mkNode( E_CHARGE, "clothes/glove"); return CHARGE; }
(sleeve|mau?nche?)s? { mkNode( E_CHARGE, "clothes/maunche"); return CHARGE; }
?mans{S}garters? { mkNode( E_CHARGE, "clothes/garter"); return CHARGE; }
(purse|scrip)s? { mkNode( E_CHARGE, "clothes/purse"); return CHARGE; }
bags? { mkNode( E_CHARGE, "clothes/bag"); return CHARGE; }
breeche?s? { mkNode( E_CHARGE, "clothes/breeches"); return CHARGE; }
pouch(es)? { mkNode( E_CHARGE, "clothes/bag"); return CHARGE; }
comedy{S}masks? { mkNode( E_CHARGE, "clothes/mask-comedy"); return CHARGE; }
tragedy{S}masks? { mkNode( E_CHARGE, "clothes/mask-tragedy"); return CHARGE; }
   // Where{S}are{S}my{S}Dragons?!
(chinese|oriental){S}dragons? { mkNode( E_CHARGE, "dragon/chinese-dragon"); return CHARGE; }
welsh{S}dragons? { mkNode( E_CHARGE, "dragon/welsh-dragon"); return CHARGE; }
dragons? { mkNode( E_CHARGE, "dragon/dragon"); return CHARGE; }
w[yi]vern?s? { mkNode( E_CHARGE, "dragon/wyvern"); return CHARGE; }
   // mythical{S}/{S}stylised{S}creatures
deer{S}goats? { mkNode( E_CHARGE, "mythical/deer-goat"); return CHARGE; }
?worm{S}ou?rou?borose?s? { mkNode( E_CHARGE, "mythical/ouroboros"); return CHARGE; }
lion{S}goats? { mkNode( E_CHARGE, "mythical/lion-goat"); return CHARGE; }
camelopardels? { mkNode( E_CHARGE, "mythical/giraffe-horned"); return CHARGE; }
unicorns? { mkNode( E_CHARGE, "mythical/unicorn"); return CHARGE; }
uni{S}corns? { mkNode( E_CHARGE, "mythical/unicorn"); return CHARGE; }
sphinx(es)? { mkNode( E_CHARGE, "mythical/sphinx"); return CHARGE; }
egyptian{S}sphinx(es)? { mkNode( E_CHARGE, "mythical/sphinx-egyptian"); return CHARGE; }
greek{S}sphinx(es)? { mkNode( E_CHARGE, "mythical/sphinx-greek"); return CHARGE; }
man{S}lions? { mkNode( E_CHARGE, "mythical/man-lion"); return CHARGE; }
opinic(i|us) { mkNode( E_CHARGE, "mythical/opinicus"); return CHARGE; }
t[iy]gers? { mkNode( E_CHARGE, "animal/tiger"); return CHARGE; }
man{S}t[iy]gers? { mkNode( E_CHARGE, "mythical/manticore"); return CHARGE; }
manticores? { mkNode( E_CHARGE, "mythical/manticore"); return CHARGE; }
musimons? { mkNode( E_CHARGE, "mythical/musimon"); return CHARGE; }
lamias? { mkNode( E_CHARGE, "mythical/lamia"); return CHARGE; }
enfields? { mkNode( E_CHARGE, "mythical/enfield"); return CHARGE; }
harp(y|ie)s? { mkNode( E_CHARGE, "mythical/harpy"); return CHARGE; }
amphi[ps]?teres? { mkNode( E_CHARGE, "mythical/amphiptere"); return CHARGE; }
tritons? { mkNode( E_CHARGE, "mythical/merman"); return CHARGE; }
devils? { mkNode( E_CHARGE, "mythical/devil"); return CHARGE; }
frauenadlers? { mkNode( E_CHARGE, "mythical/frauenadler"); return CHARGE; }
alphyns? { mkNode( E_CHARGE, "mythical/alphyn"); return CHARGE; }
keythongs? { mkNode( E_CHARGE, "mythical/keythong"); return CHARGE; }
(centaurs?|sagittarius|sagittary) { mkNode( E_CHARGE, "mythical/centaur"); return CHARGE; }
?amphisien{S}cockatrices? { mkNode( E_CHARGE, "mythical/cockatrice"); return CHARGE; }
basilisks? { mkNode( E_CHARGE, "mythical/cockatrice"); return CHARGE; }
(griff[oi]n|gryphon|keythong)s? { mkNode( E_CHARGE, "mythical/griffin"); return CHARGE; }
fishtail(ed)?{S}(griff[oi]n|gryphon)s? { mkNode( E_CHARGE, "mythical/fishtail-griffin"); return CHARGE; }
hippogriffs? { mkNode( E_CHARGE, "mythical/hippogriff"); return CHARGE; }
hydras? { mkNode( E_CHARGE, "mythical/hydra"); return CHARGE; }
mermaids? { mkNode( E_CHARGE, "mythical/mermaid"); return CHARGE; }
mermaids?{S}in{S}(her|their){S}vanity { mkNode( E_CHARGE, "mythical/mermaid-in-her-vanity"); return CHARGE; }
mermaids?{S}in{S}(her|their){S}modesty { mkNode( E_CHARGE, "mythical/mermaid-in-her-modesty"); return CHARGE; }
merm[ea]n? { mkNode( E_CHARGE, "mythical/merman"); return CHARGE; }
sirens? { mkNode( E_CHARGE, "mythical/mermaid"); return CHARGE; }
phoenixe?s? { mkNode( E_CHARGE, "mythical/phoenix"); return CHARGE; }
salamanders? { mkNode( E_CHARGE, "mythical/salamander"); return CHARGE; }
petasus { mkNode( E_CHARGE, "mythical/petasus"); return CHARGE; }
yales? { mkNode( E_CHARGE, "mythical/yale"); return CHARGE; }
pegas(i|us) { mkNode( E_CHARGE, "mythical/pegasus"); return CHARGE; }
{S}//  {S}array{S}( 'amphisien{S}cockatrices? { mkNode( E_CHARGE, "mythical/basilisk"); return CHARGE; }
bagwyns? { mkNode( E_CHARGE, "mythical/bagwyn"); return CHARGE; }
basilisks? { mkNode( E_CHARGE, "mythical/basilisk"); return CHARGE; }
(calopo?us|chatloups?) { mkNode( E_CHARGE, "mythical/chatloup"); return CHARGE; }
melusines? { mkNode( E_CHARGE, "mythical/melusine"); return CHARGE; }
panthers? { mkNode( E_CHARGE, "mythical/panther"); return CHARGE; }
ounces? { mkNode( E_CHARGE, "mythical/panther"); return CHARGE; }
krakens? { mkNode( E_CHARGE, "mythical/kraken"); return CHARGE; }
  {S}// utensils{S}(and{S}crockery)
?water{S}b(ou|ed)gets? { mkNode( E_CHARGE, "utensil/water-bouget"); return CHARGE; }
dossers? { mkNode( E_CHARGE, "utensil/water-bouget"); return CHARGE; }
flesh{S}pots? { mkNode( E_CHARGE, "utensil/fleshpot"); return CHARGE; }
fleshpots? { mkNode( E_CHARGE, "utensil/fleshpot"); return CHARGE; }
?round{S}trivets? { mkNode( E_CHARGE, "utensil/trivet"); return CHARGE; }
triangular{S}trivets? { mkNode( E_CHARGE, "utensil/triangular-trivet"); return CHARGE; }
cauldrons? { mkNode( E_CHARGE, "utensil/cauldron"); return CHARGE; }
chargers? { mkNode( E_CHARGE, "utensil/charger"); return CHARGE; }
(chalice|cup)s? { mkNode( E_CHARGE, "utensil/chalice"); return CHARGE; }
(drinking|college|lily){S}(pot|cup)s? { mkNode( E_CHARGE, "utensil/chalice"); return CHARGE; }{S}
ladles? { mkNode( E_CHARGE, "utensil/ladle"); return CHARGE; }
covers?{S}for{S}?a{S}(pot|cup)s? { mkNode( E_CHARGE, "utensil/covered-cup"); return CHARGE; }
(pot|cup){S}covers? { mkNode( E_CHARGE, "utensil/covered-cup"); return CHARGE; }
mugs? { mkNode( E_CHARGE, "utensil/mug"); return CHARGE; }
cups? { mkNode( E_CHARGE, "utensil/cup"); return CHARGE; }
goblets? { mkNode( E_CHARGE, "utensil/goblet"); return CHARGE; }
forks? { mkNode( E_CHARGE, "utensil/fork"); return CHARGE; }
spoons? { mkNode( E_CHARGE, "utensil/spoon"); return CHARGE; }
(ew|beak|pitch)ers? { mkNode( E_CHARGE, "utensil/ewer"); return CHARGE; }
(lav|wat)er{S}pots? { mkNode( E_CHARGE, "utensil/ewer"); return CHARGE; }
   // furnishings
(oreiller|cushion)s? { mkNode( E_CHARGE, "furnishings/cushion"); return CHARGE; }
pillows? { mkNode( E_CHARGE, "furnishings/pillow"); return CHARGE; }
tables? { mkNode( E_CHARGE, "furnishings/table"); return CHARGE; }
tassels? { mkNode( E_CHARGE, "furnishings/tassel"); return CHARGE; }
(seat|chair)s? { mkNode( E_CHARGE, "furnishings/chair"); return CHARGE; }
gonfann?ons? { mkNode( E_CHARGE, "furnishings/gonfannon"); return CHARGE; }
wool[ps]acks? { mkNode( E_CHARGE, "furnishings/wool-pack"); return CHARGE; }
wool{S}[ps]acks? { mkNode( E_CHARGE, "furnishings/wool-pack"); return CHARGE; }
(garlands?|chaplets?|wreaths?) { mkNode( E_CHARGE, "furnishings/garland"); return CHARGE; }
   // food{S}(manufactured)
?wedges?{S}?of{S}cheeses { mkNode( E_CHARGE, "food/cheese-wedge"); return CHARGE; }
?wheels?{S}?of{S}cheeses { mkNode( E_CHARGE, "food/cheese-wheel"); return CHARGE; }
cheese{S}wedges? { mkNode( E_CHARGE, "food/cheese-wedge"); return CHARGE; }
cheese{S}wheels? { mkNode( E_CHARGE, "food/cheese-wheel"); return CHARGE; }
breadloa(f|ves) { mkNode( E_CHARGE, "food/breadloaf"); return CHARGE; }
loa(f|ves){S}of{S}bread { mkNode( E_CHARGE, "food/breadloaf"); return CHARGE; }
   //games
dic?e { mkNode( E_CHARGE, "games/dice"); return CHARGE; }
domino(es)? { mkNode( E_CHARGE, "games/domino"); return CHARGE; }
(chessrook|cocke)s? { mkNode( E_CHARGE, "games/chessrook"); return CHARGE; }
chess{S}rooks? { mkNode( E_CHARGE, "games/chessrook"); return CHARGE; }
chess{S}queens? { mkNode( E_CHARGE, "games/chess-queen"); return CHARGE; }
chess{S}kings? { mkNode( E_CHARGE, "games/chess-king"); return CHARGE; }
chess{S}pawns? { mkNode( E_CHARGE, "games/chess-pawn"); return CHARGE; }
chess{S}knights? { mkNode( E_CHARGE, "games/chess-knight"); return CHARGE; }
chess{S}bishops? { mkNode( E_CHARGE, "games/chess-bishop"); return CHARGE; }
chess{S}castles? { mkNode( E_CHARGE, "games/chess-castle"); return CHARGE; }
jesters?{S}baubles? { mkNode( E_CHARGE, "games/jesters-bauble"); return CHARGE; }
alquerque{S}boards? { mkNode( E_CHARGE, "games/board-alquerque"); return CHARGE; }
(nine|9){S}mens?{S}morris{S}boards? { mkNode( E_CHARGE, "games/board-nine-mens-morris"); return CHARGE; }
(twelve|12){S}mens?{S}morris{S}boards? { mkNode( E_CHARGE, "games/board-twelve-mens-morris"); return CHARGE; }
   // crafts
spindles?{S}?of{S}?silk { mkNode( E_CHARGE, "crafts/spindle"); return CHARGE; }
ribbons? { mkNode( E_CHARGE, "crafts/ribbon"); return CHARGE; }
thimbles? { mkNode( E_CHARGE, "crafts/thimble"); return CHARGE; }
scissors { mkNode( E_CHARGE, "crafts/scissors"); return CHARGE; }
shears { mkNode( E_CHARGE, "crafts/shears"); return CHARGE; }
?balls?{S}?of{S}yarn { mkNode( E_CHARGE, "crafts/yarn-ball"); return CHARGE; }
yarn{S}balls? { mkNode( E_CHARGE, "crafts/yarn-ball"); return CHARGE; }
needles? { mkNode( E_CHARGE, "crafts/needle"); return CHARGE; }
threaded{S}needles? { mkNode( E_CHARGE, "crafts/needle-threaded"); return CHARGE; }
needles?{S}threaded{S} { mkNode( E_CHARGE, "crafts/needle-threaded"); return CHARGE; }
?weavers?{S}shuttles? { mkNode( E_CHARGE, "crafts/shuttle"); return CHARGE; }
artists{S}brush(es)? { mkNode( E_CHARGE, "crafts/artists-brush"); return CHARGE; }
embroiderers?{S}broach(es)? { mkNode( E_CHARGE, "crafts/embroiderers-broach"); return CHARGE; }
quills?{S}?pens? { mkNode( E_CHARGE, "crafts/quill-pen"); return CHARGE; }
thread{S}spools? { mkNode( E_CHARGE, "crafts/thread-spool"); return CHARGE; }
barber{S}poles? { mkNode( E_CHARGE, "crafts/barber-pole"); return CHARGE; }
spools?{S}?of{S}threads? { mkNode( E_CHARGE, "crafts/thread-spool"); return CHARGE; }
   // household
bungs?{S}?of{S}?a{S}?tun { mkNode( E_CHARGE, "household/bung"); return CHARGE; }
spits?{S}of{S}meat { mkNode( E_CHARGE, "household/meat-spit"); return CHARGE; }
meat{S}spits? { mkNode( E_CHARGE, "household/meat-spit"); return CHARGE; }
playing{S}tops? { mkNode( E_CHARGE, "household/tops"); return CHARGE; }
?arabian{S}lamps? { mkNode( E_CHARGE, "household/lamp"); return CHARGE; }
flasks? { mkNode( E_CHARGE, "household/flask"); return CHARGE; }
(bucket|pail)s? { mkNode( E_CHARGE, "household/bucket"); return CHARGE; }
cups?{S}of{S}acorns { mkNode( E_CHARGE, "household/cup-of-acorns"); return CHARGE; }
hour{S}glass(es)? { mkNode( E_CHARGE, "household/hourglass"); return CHARGE; }
hourglass(es)? { mkNode( E_CHARGE, "household/hourglass"); return CHARGE; }
crutch(es)? { mkNode( E_CHARGE, "household/crutch"); return CHARGE; }
books? { mkNode( E_CHARGE, "household/book"); return CHARGE; }
shel(f|ves){S}of{S}books? { mkNode( E_CHARGE, "household/book-shelf"); return CHARGE; }
bookshel(f|ves) { mkNode( E_CHARGE, "household/book-shelf"); return CHARGE; }
book{S}shel(f|ves) { mkNode( E_CHARGE, "household/book-shelf"); return CHARGE; }
abacus(es)? { mkNode( E_CHARGE, "household/abacus"); return CHARGE; }
combs? { mkNode( E_CHARGE, "household/comb"); return CHARGE; }
writing{S}pens? { mkNode( E_CHARGE, "household/pen"); return CHARGE; }
pestles?{S}?and{S}mortars? { mkNode( E_CHARGE, "household/mortar-pestle"); return CHARGE; }
mortars?{S}?and{S}pestles? { mkNode( E_CHARGE, "household/mortar-pestle"); return CHARGE; }
(hogshead|barrel|tub|tun)s? { mkNode( E_CHARGE, "household/barrel"); return CHARGE; }
ladies{S}fans? { mkNode( E_CHARGE, "household/fan-ladies"); return CHARGE; }
terrestrial{S}(globe|sphere)s? { mkNode( E_CHARGE, "household/globe"); return CHARGE; }
saltcellars? { mkNode( E_CHARGE, "household/saltcellar"); return CHARGE; }
salt{S}cellars? { mkNode( E_CHARGE, "household/saltcellar"); return CHARGE; }
candlesticks? { mkNode( E_CHARGE, "household/candlestick"); return CHARGE; }
candle{S}sticks? { mkNode( E_CHARGE, "household/candlestick"); return CHARGE; }
e?scrolls? { mkNode( E_CHARGE, "household/scroll"); return CHARGE; }
(vase|urn)s? { mkNode( E_CHARGE, "household/urn"); return CHARGE; }
amphora(e|s)? { mkNode( E_CHARGE, "household/amphora"); return CHARGE; }
leather{S}bottles? { mkNode( E_CHARGE, "household/bottle-leather"); return CHARGE; }
rubber{S}ducks? { mkNode( E_CHARGE, "household/rubber-duck"); return CHARGE; }
butter{S}churns? { mkNode( E_CHARGE, "farming/butter-churn"); return CHARGE; }
fleeces? { mkNode( E_CHARGE, "farming/fleece"); return CHARGE; }
golden{S}fleeces? { mkNode( E_CHARGE, "farming/fleece?P"); return CHARGE; }
bellows? { mkNode( E_CHARGE, "household/bellows"); return CHARGE; }
   // crown
?open{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/open-crown"); return CHARGE; }{S}// default{S}crown
antique{S}crowns? { mkNode( E_CHARGE, "crown/antique"); return CHARGE; }
triumphal{S}crowns? { mkNode( E_CHARGE, "crown/triumphal"); return CHARGE; }
papal{S}crowns? { mkNode( E_CHARGE, "crown/papal"); return CHARGE; }
obsidional{S}crowns? { mkNode( E_CHARGE, "crown/obsidional"); return CHARGE; }
(astral|celestial){S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/astral"); return CHARGE; }
barons?{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/baron"); return CHARGE; }
civil{S}crowns? { mkNode( E_CHARGE, "crown/civil"); return CHARGE; }
ducal{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/ducal"); return CHARGE; }
dukes?{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/duke"); return CHARGE; }
earls?{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/earl"); return CHARGE; }
eastern{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/eastern"); return CHARGE; }
imperial{S}crowns? { mkNode( E_CHARGE, "crown/imperial"); return CHARGE; }
(crown|coronet)s?{S}of{S}?the{S}king{S}of{S}arms { mkNode( E_CHARGE, "crown/king-of-arms"); return CHARGE; }
kings?{S}of{S}arms{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/king-of-arms"); return CHARGE; }
marquiss?{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/marquis"); return CHARGE; }
mural{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/mural"); return CHARGE; }
naval{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/naval"); return CHARGE; }
palisado{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/palisado"); return CHARGE; }
(crown|coronet)s?{S}palisados? { mkNode( E_CHARGE, "crown/palisado"); return CHARGE; }
(royal|regal){S}crowns? { mkNode( E_CHARGE, "crown/royal"); return CHARGE; }
saxon{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/saxon"); return CHARGE; }
vallary?{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/vallary"); return CHARGE; }
(crown|coronet)s?{S}vallary? { mkNode( E_CHARGE, "crown/vallary"); return CHARGE; }
viscounts?{S}(crown|coronet)s? { mkNode( E_CHARGE, "crown/viscount"); return CHARGE; }
   // music
(violin|crwth|fiddle)s? { mkNode( E_CHARGE, "music/violin"); return CHARGE; }
cla[vr]i(on|cord)s? { mkNode( E_CHARGE, "music/clarion"); return CHARGE; }
accordions? { mkNode( E_CHARGE, "music/accordion"); return CHARGE; }
hautboys? { mkNode( E_CHARGE, "music/hautboy"); return CHARGE; }
shofars? { mkNode( E_CHARGE, "music/shofar"); return CHARGE; }
rests? { mkNode( E_CHARGE, "music/clarion"); return CHARGE; }
drums? { mkNode( E_CHARGE, "music/drum"); return CHARGE; }
recorders? { mkNode( E_CHARGE, "music/recorder"); return CHARGE; }
drumsticks? { mkNode( E_CHARGE, "music/drumstick"); return CHARGE; }
harps?{S}?of{S}?ireland { mkNode( E_CHARGE, "music/harp"); return CHARGE; }{S}// no{S}difference{S}with{S}common{S}harp(?)
?hunting{S}horns? { mkNode( E_CHARGE, "music/hunting-horn"); return CHARGE; }{S}// default{S}horn
bugle{S}horns? { mkNode( E_CHARGE, "music/bugle-horn"); return CHARGE; }
organ{S}pipes? { mkNode( E_CHARGE, "music/organ-pipe"); return CHARGE; }
trumpets? { mkNode( E_CHARGE, "music/trumpet"); return CHARGE; }
flutes? { mkNode( E_CHARGE, "music/flute"); return CHARGE; }
lyres? { mkNode( E_CHARGE, "music/lyre"); return CHARGE; }
bagpipes? { mkNode( E_CHARGE, "music/bagpipe"); return CHARGE; }
   // fire
beacons? { mkNode( E_CHARGE, "fire/beacon"); return CHARGE; }
bale{S}fires? { mkNode( E_CHARGE, "fire/beacon"); return CHARGE; }
cressets? { mkNode( E_CHARGE, "fire/cresset"); return CHARGE; }
fire{S}balls? { mkNode( E_CHARGE, "fire/fireball"); return CHARGE; }
(fireball|bombshell|bombe?)s? { mkNode( E_CHARGE, "fire/fireball"); return CHARGE; }
bomb{S}shells? { mkNode( E_CHARGE, "fire/fireball"); return CHARGE; }
?hand{S}grenado?e?s? { mkNode( E_CHARGE, "fire/fireball"); return CHARGE; }
(flambeaux?|torche?s?) { mkNode( E_CHARGE, "fire/torch"); return CHARGE; }
fire{S}brands? { mkNode( E_CHARGE, "fire/torch"); return CHARGE; }
flames?{S}?of{S}?fire { mkNode( E_CHARGE, "fire/flames"); return CHARGE; }
   // characters
(numeral|number|digit|figure)s?{S}?of{S}* { mkNode( E_CHARGE, "characters/digit"); return CHARGE; }
(letters?|text){S}* { mkNode( E_CHARGE, "characters/letter"); return CHARGE; }
roman{S}?letter{S}* { mkNode( E_CHARGE, "characters/roman"); return CHARGE; }
words?{S}* { mkNode( E_CHARGE, "characters/word"); return CHARGE; }
legend{S}* { mkNode( E_CHARGE, "characters/word"); return CHARGE; }
(monogram|cypher)s?{S}* { mkNode( E_CHARGE, "characters/letter"); return CHARGE; }
question{S}marks? { mkNode( E_CHARGE, "characters/question"); return CHARGE; }
   // symbols
astronomical{S}(character|symbol)s?{S}?(of|for){S}?the{S}?planet{S}* { mkNode( E_CHARGE, "astronomical/symbol"); return CHARGE; }
zodiac(al)?{S}(character|symbol)s?{S}?(of|for){S}* { mkNode( E_CHARGE, "zodiac/symbol"); return CHARGE; }
astrological(al)?{S}(character|symbol)s?{S}?(of|for){S}* { mkNode( E_CHARGE, "zodiac/symbol"); return CHARGE; }
alchemical{S}(character|symbol)s?{S}?(of|for){S}?the{S}?element{S}* { mkNode( E_CHARGE, "alchemical/symbol"); return CHARGE; }
(character|symbol)s?{S}?(of|for){S}* { mkNode( E_CHARGE, "symbol/any"); return CHARGE; }
   // farming
shepherds{S}crooks? { mkNode( E_CHARGE, "farming/shepherds-crook"); return CHARGE; }
crooks?{S}of{S}basel { mkNode( E_CHARGE, "farming/crook-basel"); return CHARGE; }
windmills? { mkNode( E_CHARGE, "farming/windmill"); return CHARGE; }
eel{S}baskets? { mkNode( E_CHARGE, "farming/eel-basket"); return CHARGE; }
wine{S}press(es)? { mkNode( E_CHARGE, "farming/wine-press"); return CHARGE; }
wool{S}cards? { mkNode( E_CHARGE, "farming/woolcard"); return CHARGE; }
garbs? { mkNode( E_CHARGE, "farming/corn-sheaf"); return CHARGE; }
mill{S}stones? { mkNode( E_CHARGE, "farming/millstone"); return CHARGE; }
millstones? { mkNode( E_CHARGE, "farming/millstone"); return CHARGE; }
corn { mkNode( E_CHARGE, "farming/corn"); return CHARGE; }
wagons? { mkNode( E_CHARGE, "farming/wagon"); return CHARGE; }
(wheat|corn)shea(f|ves) { mkNode( E_CHARGE, "farming/corn-sheaf"); return CHARGE; }
(wheat|corn){S}shea(f|ves) { mkNode( E_CHARGE, "farming/corn-sheaf"); return CHARGE; }
shea(f|ves){S}of{S}(wheat|corn) { mkNode( E_CHARGE, "farming/corn-sheaf"); return CHARGE; }
oat{S}shea(f|ves) { mkNode( E_CHARGE, "farming/oat-sheaf"); return CHARGE; }
oatshea(f|ves) { mkNode( E_CHARGE, "farming/oat-sheaf"); return CHARGE; }
winnowing{S}fans? { mkNode( E_CHARGE, "farming/fan-winnowing"); return CHARGE; }
scruttles? { mkNode( E_CHARGE, "farming/fan-winnowing"); return CHARGE; }
?(wagon|cart){S}wheels?{S}?of{S}? {S}?spokes { mkNode( E_CHARGE, "farming/spoked-wheel"); return CHARGE; }
beehives? { mkNode( E_CHARGE, "farming/beehive"); return CHARGE; }
shredding{S}kni[fv]es? { mkNode( E_CHARGE, "farming/shredding-knife"); return CHARGE; }
plo(ugh|w)s? { mkNode( E_CHARGE, "farming/plough"); return CHARGE; }
plo(ugh|w)shares? { mkNode( E_CHARGE, "farming/ploughshare"); return CHARGE; }
plo(ugh|w){S}shares? { mkNode( E_CHARGE, "farming/ploughshare"); return CHARGE; }
wicker{S}fences? { mkNode( E_CHARGE, "farming/wicker-fence"); return CHARGE; }
fish{S}hooks? { mkNode( E_CHARGE, "farming/fishhook"); return CHARGE; }
fishhooks? { mkNode( E_CHARGE, "farming/fishhook"); return CHARGE; }
harrows? { mkNode( E_CHARGE, "farming/harrow"); return CHARGE; }
sickles? { mkNode( E_CHARGE, "farming/sickle"); return CHARGE; }
   // knot
knots? { mkNode( E_CHARGE, "knot/knot"); return CHARGE; }
bourchier{S}knots? { mkNode( E_CHARGE, "knot/bourchier"); return CHARGE; }
harrington{S}knots? { mkNode( E_CHARGE, "knot/harrington"); return CHARGE; }
he?ane?age{S}knots? { mkNode( E_CHARGE, "knot/heneage-knot"); return CHARGE; }
ormonde{S}knots? { mkNode( E_CHARGE, "knot/ormonde"); return CHARGE; }
stafford{S}knots? { mkNode( E_CHARGE, "knot/stafford-knot"); return CHARGE; }
(wake|ormond){S}knots? { mkNode( E_CHARGE, "knot/wake-knot"); return CHARGE; }
cords? { mkNode( E_CHARGE, "knot/cord"); return CHARGE; }
celtic{S}knots? { mkNode( E_CHARGE, "knot/celtic-knot"); return CHARGE; }
de{S}lacy{S}knots? { mkNode( E_CHARGE, "knot/de-lacy-knot"); return CHARGE; }
bowen{S}knots? { mkNode( E_CHARGE, "knot/bowen-knot"); return CHARGE; }
lovers?{S}knots? { mkNode( E_CHARGE, "knot/lovers-knot"); return CHARGE; }
(trinity|trefoil)?{S}knots? { mkNode( E_CHARGE, "knot/trinity-knot"); return CHARGE; }
triquetras?{S}?knots? { mkNode( E_CHARGE, "knot/trinity-knot"); return CHARGE; }
quatrefoil?{S}?knots? { mkNode( E_CHARGE, "knot/quatrefoil-knot"); return CHARGE; }
   // special
of{S}the{S}same { mkNode( E_CHARGE, "special/same"); return CHARGE; }
more{S}?of{S}?the{S}?same { mkNode( E_CHARGE, "special/same"); return CHARGE; }
(an)?others? { mkNode( E_CHARGE, "special/same"); return CHARGE; }
one { mkNode( E_CHARGE, "special/same"); return CHARGE; }{S}// as{S}in{S}"a{S}double{S}one"
escut?cheons?{S}?of{S}?pretence { mkNode( E_CHARGE, "special/escutcheon"); return CHARGE; }
socheons? { mkNode( E_CHARGE, "special/escutcheon"); return CHARGE; }
   // emblem
rods?{S}?of{S}(a|e|ae)scu?l[ae]pi?us { mkNode( E_CHARGE, "emblem/rod-of-esclapius"); return CHARGE; }
thyrsuse?s?{S}?of{S}?dionysus { mkNode( E_CHARGE, "emblem/thyrsus"); return CHARGE; }
ankhs? { mkNode( E_CHARGE, "emblem/ankh"); return CHARGE; }
caduceus { mkNode( E_CHARGE, "emblem/caduceus"); return CHARGE; }
laurel{S}wreaths? { mkNode( E_CHARGE, "emblem/laurel-wreath"); return CHARGE; }
staffs?{S}of{S}mercury { mkNode( E_CHARGE, "emblem/caduceus"); return CHARGE; }
cornucopias? { mkNode( E_CHARGE, "emblem/cornucopia"); return CHARGE; }
ermine{S}spots? { mkNode( E_CHARGE, "emblem/ermine-spot"); return CHARGE; }
spots? { mkNode( E_CHARGE, "emblem/spot"); return CHARGE; }
fasces { mkNode( E_CHARGE, "emblem/fasces"); return CHARGE; }
pentagram { mkNode( E_CHARGE, "emblem/pentagram"); return CHARGE; }
triskes?lion { mkNode( E_CHARGE, "emblem/triskelion"); return CHARGE; }
pentacle { mkNode( E_CHARGE, "emblem/pentacle"); return CHARGE; }
chi{S}rho { mkNode( E_CHARGE, "emblem/chi-rho"); return CHARGE; }
menorah { mkNode( E_CHARGE, "emblem/menorah"); return CHARGE; }
(star|shield)s?{S}of{S}david { mkNode( E_CHARGE, "emblem/star-of-david"); return CHARGE; }
fleurs?{S}de{S}l(y|i)s { mkNode( E_CHARGE, "emblem/fleur-de-lys"); return CHARGE; }
heralds?{S}(staff|baton)s? { mkNode( E_CHARGE, "emblem/heralds-staff"); return CHARGE; }
labyrinths? { mkNode( E_CHARGE, "emblem/labyrinth"); return CHARGE; }
musical{S}notes? { mkNode( E_CHARGE, "emblem/musical-note"); return CHARGE; }
nesselblatt(s|er)? { mkNode( E_CHARGE, "emblem/nesselblatt"); return CHARGE; }
   // playing{S}cards
?playing{S}cards?{S}backs? { mkNode( E_CHARGE, "playing-card/card-back"); return CHARGE; }
?playing{S}cards?{S}clubs? { mkNode( E_CHARGE, "playing-card/club"); return CHARGE; }
?playing{S}cards?{S}hearts? { mkNode( E_CHARGE, "playing-card/heart"); return CHARGE; }
?playing{S}cards?{S}spades? { mkNode( E_CHARGE, "playing-card/spade"); return CHARGE; }
?playing{S}cards?{S}diamonds? { mkNode( E_CHARGE, "playing-card/diamond"); return CHARGE; }
?playing{S}?cards?{S}kings? { mkNode( E_CHARGE, "playing-card/king"); return CHARGE; }
?playing{S}?cards?{S}queens? { mkNode( E_CHARGE, "playing-card/queen"); return CHARGE; }
?playing{S}?cards?{S}jacks? { mkNode( E_CHARGE, "playing-card/jack"); return CHARGE; }
?playing{S}?cards?{S}jokers? { mkNode( E_CHARGE, "playing-card/joker"); return CHARGE; }
?playing{S}?cards?{S}red{S}jokers? { mkNode( E_CHARGE, "playing-card/joker-red"); return CHARGE; }
?playing{S}?cards?{S}black{S}jokers? { mkNode( E_CHARGE, "playing-card/joker-black"); return CHARGE; }
?playing{S}?cards?{S}aces? { mkNode( E_CHARGE, "playing-card/ace"); return CHARGE; }
?playing{S}?cards?{S}(two|deuce|2)s? { mkNode( E_CHARGE, "playing-card/two"); return CHARGE; }
?playing{S}?cards?{S}(three|3)s? { mkNode( E_CHARGE, "playing-card/three"); return CHARGE; }
?playing{S}?cards?{S}(four|4)s? { mkNode( E_CHARGE, "playing-card/four"); return CHARGE; }
?playing{S}?cards?{S}(five|5)s? { mkNode( E_CHARGE, "playing-card/five"); return CHARGE; }
?playing{S}?cards?{S}(six|6)e?s? { mkNode( E_CHARGE, "playing-card/six"); return CHARGE; }
?playing{S}?cards?{S}(seven|7)s? { mkNode( E_CHARGE, "playing-card/seven"); return CHARGE; }
?playing{S}?cards?{S}(eight|8)s? { mkNode( E_CHARGE, "playing-card/eight"); return CHARGE; }
?playing{S}?cards?{S}(nine|9)s? { mkNode( E_CHARGE, "playing-card/nine"); return CHARGE; }
?playing{S}?cards?{S}(ten|10)s? { mkNode( E_CHARGE, "playing-card/ten"); return CHARGE; }
?playing{S}?cards?{S}winning{S}hands? { mkNode( E_CHARGE, "playing-card/hand-winning"); return CHARGE; }
?playing{S}?cards?{S}losing{S}hands? { mkNode( E_CHARGE, "playing-card/hand-losing"); return CHARGE; }
winning{S}hands?{S}of{S}?playing{S}cards { mkNode( E_CHARGE, "playing-card/hand-winning"); return CHARGE; }
losing{S}hands?{S}of{S}?playing{S}cards { mkNode( E_CHARGE, "playing-card/hand-losing"); return CHARGE; }
hands?{S}of{S}?playing{S}cards { mkNode( E_CHARGE, "playing-card/hand"); return CHARGE; }
   // jewellery{S}/{S}treasure
(gemel|gimmel){S}ring { mkNode( E_CHARGE, "jewel/gemel-ring"); return CHARGE; }
gimball { mkNode( E_CHARGE, "jewel/gemel-ring"); return CHARGE; }
?royal{S}(orbs?|mounds?){S}?royal { mkNode( E_CHARGE, "jewel/orb"); return CHARGE; }
rub(y|ies) { mkNode( E_CHARGE, "jewel/ruby"); return CHARGE; }
crystals? { mkNode( E_CHARGE, "jewel/crystal"); return CHARGE; }
diamonds? { mkNode( E_CHARGE, "jewel/crystal"); return CHARGE; }
tor(c|que)s? { mkNode( E_CHARGE, "jewel/torque"); return CHARGE; }
   // retro{S}sci-fi
planets? { mkNode( E_CHARGE, "retro-scifi/ringed-planet"); return CHARGE; }
rayguns? { mkNode( E_CHARGE, "retro-scifi/raygun"); return CHARGE; }
ray{S}guns? { mkNode( E_CHARGE, "retro-scifi/raygun"); return CHARGE; }
space{S}ships? { mkNode( E_CHARGE, "retro-scifi/rocket"); return CHARGE; }
spaceships? { mkNode( E_CHARGE, "retro-scifi/rocket"); return CHARGE; }
rockets?{S}?ships? { mkNode( E_CHARGE, "retro-scifi/rocket"); return CHARGE; }
rocketships? { mkNode( E_CHARGE, "retro-scifi/rocket"); return CHARGE; }
atoms? { mkNode( E_CHARGE, "retro-scifi/atom"); return CHARGE; }
stars? { mkNode( E_CHARGE, "retro-scifi/star"); return CHARGE; }
sputniks? { mkNode( E_CHARGE, "retro-scifi/sputnik"); return CHARGE; }
spiral{S}galax(y|ies) { mkNode( E_CHARGE, "retro-scifi/spiral-galaxy"); return CHARGE; }
spacestations? { mkNode( E_CHARGE, "retro-scifi/space-station"); return CHARGE; }
space{S}stations? { mkNode( E_CHARGE, "retro-scifi/space-station"); return CHARGE; }
planet{S}earths? { mkNode( E_CHARGE, "retro-scifi/planet-earth"); return CHARGE; }
(rocket|space){S}m[ae]n { mkNode( E_CHARGE, "retro-scifi/rocket-man"); return CHARGE; }
(rocket|space)m[ae]n { mkNode( E_CHARGE, "retro-scifi/rocket-man"); return CHARGE; }
   {S}// sports
balls? { mkNode( E_CHARGE, "sports/ball"); return CHARGE; }
cricket{S}bats? { mkNode( E_CHARGE, "sports/cricket-bat"); return CHARGE; }
cricket{S}stumps? { mkNode( E_CHARGE, "sports/cricket-stumps"); return CHARGE; }
cricket{S}balls? { mkNode( E_CHARGE, "sports/cricket-ball"); return CHARGE; }
baseballs? { mkNode( E_CHARGE, "sports/baseball"); return CHARGE; }
soccer{S}balls? { mkNode( E_CHARGE, "sports/soccer-ball"); return CHARGE; }
?american{S}footballs? { mkNode( E_CHARGE, "sports/american-football"); return CHARGE; }
basketballs? { mkNode( E_CHARGE, "sports/basketball"); return CHARGE; }
basket{S}balls? { mkNode( E_CHARGE, "sports/basketball"); return CHARGE; }
tennis{S}balls? { mkNode( E_CHARGE, "sports/tennis-ball"); return CHARGE; }
football{S}helmets? { mkNode( E_CHARGE, "sports/football-helmet"); return CHARGE; }
baseball{S}gloves? { mkNode( E_CHARGE, "sports/baseball-glove"); return CHARGE; }
sports?{S}(number|digit)s?{S}* { mkNode( E_CHARGE, "sports/number"); return CHARGE; }
   {S}// logos{S}(srsly?)
reddit{S}aliens? { mkNode( E_CHARGE, "logo/reddit-alien"); return CHARGE; }
snoos? { mkNode( E_CHARGE, "logo/reddit-alien"); return CHARGE; }
   {S}// modern
parachutes? { mkNode( E_CHARGE, "modern/parachute"); return CHARGE; }
   {S}// warhammer
adeptus{S}arbites?{S}symbols?',	{S}'warhammer/adeptus-arbites-symbol"); return CHARGE; }
adeptus{S}astartes?{S}symbols?',	{S}'warhammer/adeptus-astartes-symbol"); return CHARGE; }
adeptus{S}astra{S}telepathica{S}symbols?',	{S}'warhammer/adeptus-astra-telepathica-symbol"); return CHARGE; }
adeptus{S}astronomica{S}symbols?',	{S}'warhammer/adeptus-astronomica-symbol"); return CHARGE; }
adeptus{S}custodes?{S}symbols?',	{S}'warhammer/adeptus-custodes-symbol"); return CHARGE; }
adeptus{S}mechanicus{S}symbols?',	{S}'warhammer/adeptus-mechanicus-symbol"); return CHARGE; }
adeptus{S}ministorum{S}symbols?',	{S}'warhammer/adeptus-ministorum-symbol"); return CHARGE; }
adeptus{S}terra{S}symbols?',	{S}'warhammer/adeptus-terra-symbol"); return CHARGE; }
administratum{S}symbols?',	{S}'warhammer/administratum-symbol"); return CHARGE; }
alaitoc{S}symbols?',	{S}'warhammer/alaitoc-symbol"); return CHARGE; }
alpha{S}legion{S}symbols?',	{S}'warhammer/alpha-legion-symbol"); return CHARGE; }
angels?{S}of{S}defiance{S}symbols?',	{S}'warhammer/angels-of-defiance-symbol"); return CHARGE; }
angels?{S}of{S}iron{S}symbols?',	{S}'warhammer/angels-of-iron-symbol"); return CHARGE; }
angels?{S}of{S}redemption{S}symbols?',	{S}'warhammer/angels-of-redemption-symbol"); return CHARGE; }
angels?{S}of{S}retribution{S}symbols?',	{S}'warhammer/angels-of-retribution-symbol"); return CHARGE; }
angels?{S}of{S}vengance{S}alternate{S}symbols?',	{S}'warhammer/angels-of-vengance-alternate-symbol"); return CHARGE; }
angels?{S}of{S}vengance{S}symbols?',	{S}'warhammer/angels-of-vengance-symbol"); return CHARGE; }
angels?{S}of{S}vigilance{S}symbols?',	{S}'warhammer/angels-of-vigilance-symbol"); return CHARGE; }
angels?{S}penitent{S}symbols?',	{S}'warhammer/angels-penitent-symbol"); return CHARGE; }
apothecarium{S}alternate{S}symbols?',	{S}'warhammer/apothecarium-alternate-symbol"); return CHARGE; }
apothecarium{S}symbols?',	{S}'warhammer/apothecarium-symbol"); return CHARGE; }
assassinorum{S}symbols?',	{S}'warhammer/assassinorum-symbol"); return CHARGE; }
assult{S}symbols?',	{S}'warhammer/assult-symbol"); return CHARGE; }
astral{S}claws?{S}symbols?',	{S}'warhammer/astral-claws-symbol"); return CHARGE; }
astra{S}militarum{S}symbols?',	{S}'warhammer/astra-militarum-symbol"); return CHARGE; }
auxilia{S}myrmidon{S}symbols?',	{S}'warhammer/auxilia-myrmidon-symbol"); return CHARGE; }
avatater{S}of{S}khaine{S}symbols?',	{S}'warhammer/avatater-of-khaine-symbol"); return CHARGE; }
avengers?{S}symbols?',	{S}'warhammer/avengers-symbol"); return CHARGE; }
avenging{S}sons?{S}symbols?',	{S}'warhammer/avenging-sons-symbol"); return CHARGE; }
biel{S}tan{S}symbols?',	{S}'warhammer/biel-tan-symbol"); return CHARGE; }
black{S}legion{S}symbols?',	{S}'warhammer/black-legion-symbol"); return CHARGE; }
blackshields?{S}symbols?',	{S}'warhammer/blackshields-symbol"); return CHARGE; }
black{S}templars?{S}symbols?',	{S}'warhammer/black-templars-symbol"); return CHARGE; }
bladed{S}cog{S}symbols?',	{S}'warhammer/bladed-cog-symbol"); return CHARGE; }
blades?{S}of{S}vengeance{S}symbols?',	{S}'warhammer/blades-of-vengeance-symbol"); return CHARGE; }
blood{S}angels?{S}symbols?',	{S}'warhammer/blood-angels-symbol"); return CHARGE; }
blood{S}drinkers?{S}symbols?',	{S}'warhammer/blood-drinkers-symbol"); return CHARGE; }
blood{S}ravens?{S}symbols?',	{S}'warhammer/blood-ravens-symbol"); return CHARGE; }
blood{S}swords?{S}symbols?',	{S}'warhammer/blood-swords-symbol"); return CHARGE; }
bolter{S}mkv{S}alternate{S}symbols?',	{S}'warhammer/bolter-mkv-alternate-symbol"); return CHARGE; }
bolter{S}mkv{S}symbols?',	{S}'warhammer/bolter-mkv-symbol"); return CHARGE; }
carcharodons?{S}symbols?',	{S}'warhammer/carcharodons-symbol"); return CHARGE; }
celestial{S}lions?{S}symbols?',	{S}'warhammer/celestial-lions-symbol"); return CHARGE; }
centurio{S}ordinatus{S}symbols?',	{S}'warhammer/centurio-ordinatus-symbol"); return CHARGE; }
chaos?{S}star{S}symbols?',	{S}'warhammer/chaos-star-symbol"); return CHARGE; }
chaplain{S}symbols?',	{S}'warhammer/chaplain-symbol"); return CHARGE; }
charnel{S}guard{S}symbols?',	{S}'warhammer/charnel-guard-symbol"); return CHARGE; }
collegia{S}titanica{S}symbols?',	{S}'warhammer/collegia-titanica-symbol"); return CHARGE; }
consecrators?{S}symbols?',	{S}'warhammer/consecrators-symbol"); return CHARGE; }
crimson{S}talons?{S}symbols?',	{S}'warhammer/crimson-talons-symbol"); return CHARGE; }
crux{S}terminatus{S}symbols?',	{S}'warhammer/crux-terminatus-symbol"); return CHARGE; }
cult{S}mechanicus{S}symbols?',	{S}'warhammer/cult-mechanicus-symbol"); return CHARGE; }
dark{S}angels?{S}symbols?',	{S}'warhammer/dark-angels-symbol"); return CHARGE; }
dark{S}eldar{S}symbols?',	{S}'warhammer/dark-eldar-symbol"); return CHARGE; }
death{S}eagles?{S}symbols?',	{S}'warhammer/death-eagles-symbol"); return CHARGE; }
death{S}guard{S}pre{S}heresy{S}symbols?',	{S}'warhammer/death-guard-pre-heresy-symbol"); return CHARGE; }
death{S}guard{S}symbols?',	{S}'warhammer/death-guard-symbol"); return CHARGE; }
death{S}spectres?{S}symbols?',	{S}'warhammer/death-spectres-symbol"); return CHARGE; }
deathwatch{S}symbols?',	{S}'warhammer/deathwatch-symbol"); return CHARGE; }
deathwing{S}symbols?',	{S}'warhammer/deathwing-symbol"); return CHARGE; }
destroyers?{S}symbols?',	{S}'warhammer/destroyers-symbol"); return CHARGE; }
devestator{S}symbols?',	{S}'warhammer/devestator-symbol"); return CHARGE; }
disciples?{S}of{S}caliban{S}symbols?',	{S}'warhammer/disciples-of-caliban-symbol"); return CHARGE; }
elites?{S}symbols?',	{S}'warhammer/elites-symbol"); return CHARGE; }
emperors?{S}children{S}symbols?',	{S}'warhammer/emperors-children-symbol"); return CHARGE; }
emperors?{S}spears? symbols?',	{S}'warhammer/emperors-spears-symbol"); return CHARGE; }
evil{S}sunz{S}symbols?',	{S}'warhammer/evil-sunz-symbol"); return CHARGE; }
executioners?{S}symbols?',	{S}'warhammer/executioners-symbol"); return CHARGE; }
exorcists?{S}symbols?',	{S}'warhammer/exorcists-symbol"); return CHARGE; }
fallen{S}symbols?',	{S}'warhammer/fallen-symbol"); return CHARGE; }
fire{S}hawks?{S}symbols?',	{S}'warhammer/fire-hawks-symbol"); return CHARGE; }
flesh{S}tearers?{S}symbols?',	{S}'warhammer/flesh-tearers-symbol"); return CHARGE; }
grey{S}knights?{S}symbols?',	{S}'warhammer/grey-knights-symbol"); return CHARGE; }
guardians?{S}of{S}the{S}covenant{S}symbols?',	{S}'warhammer/guardians-of-the-covenant-symbol"); return CHARGE; }
heavy{S}support{S}symbols?',	{S}'warhammer/heavy-support-symbol"); return CHARGE; }
high{S}lords?{S}of{S}terra{S}symbols?',	{S}'warhammer/high-lords-of-terra-symbol"); return CHARGE; }
hivecult{S}symbols?',	{S}'warhammer/hivecult-symbol"); return CHARGE; }
imperial{S}aquila{S}alternate{S}symbols?',	{S}'warhammer/imperial-aquila-alternate-symbol"); return CHARGE; }
imperial{S}aquila{S}symbols?',	{S}'warhammer/imperial-aquila-symbol"); return CHARGE; }
imperial{S}fists?{S}symbols?',	{S}'warhammer/imperial-fists-symbol"); return CHARGE; }
imperial{S}knights?{S}symbols?',	{S}'warhammer/imperial-knights-symbol"); return CHARGE; }
imperial{S}lasgun{S}symbols?',	{S}'warhammer/imperial-lasgun-symbol"); return CHARGE; }
imperial{S}navy{S}symbols?',	{S}'warhammer/imperial-navy-symbol"); return CHARGE; }
inqusition{S}alternate{S}symbols?',	{S}'warhammer/inqusition-alternate-symbol"); return CHARGE; }
inqusition{S}symbols?',	{S}'warhammer/inqusition-symbol"); return CHARGE; }
invictors?{S}symbols?',	{S}'warhammer/invictors-symbol"); return CHARGE; }
iron{S}hands?{S}symbols?',	{S}'warhammer/iron-hands-symbol"); return CHARGE; }
ironjawz{S}symbols?',	{S}'warhammer/ironjawz-symbol"); return CHARGE; }
iron{S}warriors?{S}symbols?',	{S}'warhammer/iron-warriors-symbol"); return CHARGE; }
khorne{S}symbols?{S}symbols?',	{S}'warhammer/khorne-symbol-symbol"); return CHARGE; }
kill{S}team{S}symbols?',	{S}'warhammer/kill-team-symbol"); return CHARGE; }
knight{S}lords?{S}symbols?',	{S}'warhammer/knight-lords-symbol"); return CHARGE; }
lamenters?{S}symbols?',	{S}'warhammer/lamenters-symbol"); return CHARGE; }
legio{S}cybernetica{S}symbols?',	{S}'warhammer/legio-cybernetica-symbol"); return CHARGE; }
librarian{S}codicier{S}symbols?',	{S}'warhammer/librarian-codicier-symbol"); return CHARGE; }
librarian{S}epistolary{S}symbols?',	{S}'warhammer/librarian-epistolary-symbol"); return CHARGE; }
librarian{S}lexicanum{S}symbols?',	{S}'warhammer/librarian-lexicanum-symbol"); return CHARGE; }
librarius{S}alternate{S}symbols?',	{S}'warhammer/librarius-alternate-symbol"); return CHARGE; }
librarius{S}symbols?',	{S}'warhammer/librarius-symbol"); return CHARGE; }
luna{S}wolves?{S}symbols?',	{S}'warhammer/luna-wolves-symbol"); return CHARGE; }
lyanden{S}symbols?',	{S}'warhammer/lyanden-symbol"); return CHARGE; }
minotaurs?{S}symbols?',	{S}'warhammer/minotaurs-symbol"); return CHARGE; }
mymeara{S}symbols?',	{S}'warhammer/mymeara-symbol"); return CHARGE; }
navis?{S}nobilite{S}symbols?',	{S}'warhammer/navis-nobilite-symbol"); return CHARGE; }
necrons?{S}symbols?',	{S}'warhammer/necrons-symbol"); return CHARGE; }
nova{S}marines?{S}symbols?',	{S}'warhammer/nova-marines-symbol"); return CHARGE; }
nurgle{S}icon{S}symbols?',	{S}'warhammer/nurgle-icon-symbol"); return CHARGE; }
order{S}of{S}our{S}martyred{S}lady{S}symbols?',	{S}'warhammer/order-of-our-martyred-lady-symbol"); return CHARGE; }
order{S}of{S}the{S}bloody{S}rose{S}symbols?',	{S}'warhammer/order-of-the-bloody-rose-symbol"); return CHARGE; }
order{S}of{S}the{S}valorous{S}heart{S}symbols?',	{S}'warhammer/order-of-the-valorous-heart-symbol"); return CHARGE; }
ordo{S}malleus{S}symbols?',	{S}'warhammer/ordo-malleus-symbol"); return CHARGE; }
ordo{S}reductor{S}symbols?',	{S}'warhammer/ordo-reductor-symbol"); return CHARGE; }
orks?{S}symbols?',	{S}'warhammer/orks-symbol"); return CHARGE; }
pauper{S}princes?{S}symbols?',	{S}'warhammer/pauper-princes-symbol"); return CHARGE; }
pre{S}heresy{S}dark{S}angels?{S}symbols?',	{S}'warhammer/pre-heresy-dark-angels-symbol"); return CHARGE; }
pre{S}heresy{S}iron{S}warriors?{S}symbols?',	{S}'warhammer/pre-heresy-iron-warriors-symbol"); return CHARGE; }
raptor{S}imperialis?{S}symbols?',	{S}'warhammer/raptor-imperialis-symbol"); return CHARGE; }
raptors?{S}symbols?',	{S}'warhammer/raptors-symbol"); return CHARGE; }
raven{S}guard{S}symbols?',	{S}'warhammer/raven-guard-symbol"); return CHARGE; }
ravenwing{S}symbols?',	{S}'warhammer/ravenwing-symbol"); return CHARGE; }
reclusiam{S}symbols?',	{S}'warhammer/reclusiam-symbol"); return CHARGE; }
rogue{S}trader{S}symbols?',	{S}'warhammer/rogue-trader-symbol"); return CHARGE; }
saim{S}hann{S}symbols?',	{S}'warhammer/saim-hann-symbol"); return CHARGE; }
salamanders?{S}symbols?',	{S}'warhammer/salamanders-symbol"); return CHARGE; }
silver{S}skulls?{S}symbols?',	{S}'warhammer/silver-skulls-symbol"); return CHARGE; }
silver{S}templars?{S}symbols?',	{S}'warhammer/silver-templars-symbol"); return CHARGE; }
sisters?{S}of{S}battle{S}symbols?',	{S}'warhammer/sisters-of-battle-symbol"); return CHARGE; }
skitarii{S}symbols?',	{S}'warhammer/skitarii-symbol"); return CHARGE; }
skull{S}laurals?{S}symbols?',	{S}'warhammer/skull-laurals-symbol"); return CHARGE; }
skull{S}symbols?',	{S}'warhammer/skull-symbol"); return CHARGE; }
slaanesh{S}symbols?',	{S}'warhammer/slaanesh-symbol"); return CHARGE; }
solar{S}auxilia{S}symbols?',	{S}'warhammer/solar-auxilia-symbol"); return CHARGE; }
sons?{S}of{S}the{S}phoenix{S}symbols?',	{S}'warhammer/sons-of-the-phoenix-symbol"); return CHARGE; }
space{S}wolfs?{S}symbols?',	{S}'warhammer/space-wolfs-symbol"); return CHARGE; }
star{S}of{S}chaos?{S}symbols?',	{S}'warhammer/star-of-chaos-symbol"); return CHARGE; }
star{S}phantoms?{S}symbols?',	{S}'warhammer/star-phantoms-symbol"); return CHARGE; }
steel{S}legion{S}symbols?',	{S}'warhammer/steel-legion-symbol"); return CHARGE; }
sword{S}03{S}symbols?',	{S}'warhammer/sword-03-symbol"); return CHARGE; }
sword{S}alternate{S}symbols?',	{S}'warhammer/sword-alternate-symbol"); return CHARGE; }
sword{S}symbols?',	{S}'warhammer/sword-symbol"); return CHARGE; }
tactical{S}alternate{S}symbols?',	{S}'warhammer/tactical-alternate-symbol"); return CHARGE; }
tactical{S}symbols?',	{S}'warhammer/tactical-symbol"); return CHARGE; }
tanith{S}symbols?',	{S}'warhammer/tanith-symbol"); return CHARGE; }
tau{S}symbols?',	{S}'warhammer/tau-symbol"); return CHARGE; }
temple{S}callidus{S}symbols?',	{S}'warhammer/temple-callidus-symbol"); return CHARGE; }
temple{S}eversor{S}symbols?',	{S}'warhammer/temple-eversor-symbol"); return CHARGE; }
third{S}covenant{S}symbols?',	{S}'warhammer/third-covenant-symbol"); return CHARGE; }
thousand{S}sons?{S}preheresy{S}symbols?',	{S}'warhammer/thousand-sons-preheresy-symbol"); return CHARGE; }
thousand{S}sons?{S}symbols?',	{S}'warhammer/thousand-sons-symbol"); return CHARGE; }
twisted{S}helix{S}symbols?',	{S}'warhammer/twisted-helix-symbol"); return CHARGE; }
tyranid{S}symbols?',	{S}'warhammer/tyranid-symbol"); return CHARGE; }
tzeentch{S}symbols?',	{S}'warhammer/tzeentch-symbol"); return CHARGE; }
ulthwe{S}symbols?',	{S}'warhammer/ulthwe-symbol"); return CHARGE; }
ultramarines?{S}symbols?',	{S}'warhammer/ultramarines-symbol"); return CHARGE; }
vindicare{S}temple{S}symbols?',	{S}'warhammer/vindicare-temple-symbol"); return CHARGE; }
war{S}hounds?{S}symbols?',	{S}'warhammer/war-hounds-symbol"); return CHARGE; }
white{S}scars?{S}symbols?',	{S}'warhammer/white-scars-symbol"); return CHARGE; }
word{S}bearers?{S}pre{S}heresy{S}symbols?',	{S}'warhammer/word-bearers-pre-heresy-symbol"); return CHARGE; }
word{S}bearers?{S}symbols?',	{S}'warhammer/word-bearers-symbol"); return CHARGE; }
world{S}eaters?{S}symbols?',	{S}'warhammer/world-eaters-symbol"); return CHARGE; }
xenos?{S}symbols?',	{S}'warhammer/xenos-symbol"); return CHARGE; }
ynnead{S}symbols?',	{S}'warhammer/ynnead-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}arbites?',	{S}'warhammer/adeptus-arbites-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}astartes?',	{S}'warhammer/adeptus-astartes-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}astra{S}telepathica',	{S}'warhammer/adeptus-astra-telepathica-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}astronomica',	{S}'warhammer/adeptus-astronomica-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}custodes?',	{S}'warhammer/adeptus-custodes-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}mechanicus',	{S}'warhammer/adeptus-mechanicus-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}ministorum',	{S}'warhammer/adeptus-ministorum-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}adeptus{S}terra',	{S}'warhammer/adeptus-terra-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}administratum',	{S}'warhammer/administratum-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}alaitoc',	{S}'warhammer/alaitoc-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}alpha{S}legion',	{S}'warhammer/alpha-legion-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}of{S}defiance',	{S}'warhammer/angels-of-defiance-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}of{S}iron',	{S}'warhammer/angels-of-iron-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}of{S}redemption',	{S}'warhammer/angels-of-redemption-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}of{S}retribution',	{S}'warhammer/angels-of-retribution-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}of{S}vengance{S}alternate',	{S}'warhammer/angels-of-vengance-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}of{S}vengance',	{S}'warhammer/angels-of-vengance-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}of{S}vigilance',	{S}'warhammer/angels-of-vigilance-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}angels?{S}penitent',	{S}'warhammer/angels-penitent-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}apothecarium{S}alternate',	{S}'warhammer/apothecarium-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}apothecarium',	{S}'warhammer/apothecarium-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}assassinorum',	{S}'warhammer/assassinorum-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}assult',	{S}'warhammer/assult-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}astral{S}claws?',	{S}'warhammer/astral-claws-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}astra{S}militarum',	{S}'warhammer/astra-militarum-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}auxilia{S}myrmidon',	{S}'warhammer/auxilia-myrmidon-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}avatater{S}of{S}khaine',	{S}'warhammer/avatater-of-khaine-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}avengers?',	{S}'warhammer/avengers-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}avenging{S}sons?',	{S}'warhammer/avenging-sons-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}biel{S}tan',	{S}'warhammer/biel-tan-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}black{S}legion',	{S}'warhammer/black-legion-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}blackshields?',	{S}'warhammer/blackshields-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}black{S}templars?',	{S}'warhammer/black-templars-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}bladed{S}cog',	{S}'warhammer/bladed-cog-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}blades?{S}of{S}vengeance',	{S}'warhammer/blades-of-vengeance-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}blood{S}angels?',	{S}'warhammer/blood-angels-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}blood{S}drinkers?',	{S}'warhammer/blood-drinkers-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}blood{S}ravens?',	{S}'warhammer/blood-ravens-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}blood{S}swords?',	{S}'warhammer/blood-swords-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}bolter{S}mkv{S}alternate',	{S}'warhammer/bolter-mkv-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}bolter{S}mkv',	{S}'warhammer/bolter-mkv-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}carcharodons?',	{S}'warhammer/carcharodons-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}celestial{S}lions?',	{S}'warhammer/celestial-lions-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}centurio{S}ordinatus',	{S}'warhammer/centurio-ordinatus-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}chaos?{S}star',	{S}'warhammer/chaos-star-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}chaplain',	{S}'warhammer/chaplain-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}charnel{S}guard',	{S}'warhammer/charnel-guard-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}collegia{S}titanica',	{S}'warhammer/collegia-titanica-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}consecrators?',	{S}'warhammer/consecrators-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}crimson{S}talons?',	{S}'warhammer/crimson-talons-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}crux{S}terminatus',	{S}'warhammer/crux-terminatus-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}cult{S}mechanicus',	{S}'warhammer/cult-mechanicus-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}dark{S}angels?',	{S}'warhammer/dark-angels-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}dark{S}eldar',	{S}'warhammer/dark-eldar-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}death{S}eagles?',	{S}'warhammer/death-eagles-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}death{S}guard{S}pre{S}heresy',	{S}'warhammer/death-guard-pre-heresy-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}death{S}guard',	{S}'warhammer/death-guard-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}death{S}spectres?',	{S}'warhammer/death-spectres-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}deathwatch',	{S}'warhammer/deathwatch-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}deathwing',	{S}'warhammer/deathwing-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}destroyers?',	{S}'warhammer/destroyers-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}devestator',	{S}'warhammer/devestator-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}disciples?{S}of{S}caliban',	{S}'warhammer/disciples-of-caliban-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}elites?',	{S}'warhammer/elites-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}emperors?{S}children',	{S}'warhammer/emperors-children-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}emperors?{S}spears?{S} { mkNode( E_CHARGE, "warhammer/emperors-spears-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}evil{S}sunz',	{S}'warhammer/evil-sunz-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}executioners?',	{S}'warhammer/executioners-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}exorcists?',	{S}'warhammer/exorcists-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}fallen',	{S}'warhammer/fallen-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}fire{S}hawks?',	{S}'warhammer/fire-hawks-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}flesh{S}tearers?',	{S}'warhammer/flesh-tearers-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}grey{S}knights?',	{S}'warhammer/grey-knights-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}guardians?{S}of{S}the{S}covenant',	{S}'warhammer/guardians-of-the-covenant-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}heavy{S}support',	{S}'warhammer/heavy-support-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}high{S}lords?{S}of{S}terra',	{S}'warhammer/high-lords-of-terra-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}hivecult',	{S}'warhammer/hivecult-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}imperial{S}aquila{S}alternate',	{S}'warhammer/imperial-aquila-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}imperial{S}aquila',	{S}'warhammer/imperial-aquila-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}imperial{S}fists?',	{S}'warhammer/imperial-fists-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}imperial{S}knights?',	{S}'warhammer/imperial-knights-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}imperial{S}lasgun',	{S}'warhammer/imperial-lasgun-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}imperial{S}navy',	{S}'warhammer/imperial-navy-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}inqusition{S}alternate',	{S}'warhammer/inqusition-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}inqusition',	{S}'warhammer/inqusition-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}invictors?',	{S}'warhammer/invictors-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}iron{S}hands?',	{S}'warhammer/iron-hands-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}ironjawz',	{S}'warhammer/ironjawz-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}iron{S}warriors?',	{S}'warhammer/iron-warriors-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}khorne',	{S}'warhammer/khorne-symbol-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}kill{S}team',	{S}'warhammer/kill-team-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}knight{S}lords?',	{S}'warhammer/knight-lords-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}lamenters?',	{S}'warhammer/lamenters-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}legio{S}cybernetica',	{S}'warhammer/legio-cybernetica-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}librarian{S}codicier',	{S}'warhammer/librarian-codicier-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}librarian{S}epistolary',	{S}'warhammer/librarian-epistolary-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}librarian{S}lexicanum',	{S}'warhammer/librarian-lexicanum-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}librarius{S}alternate',	{S}'warhammer/librarius-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}librarius',	{S}'warhammer/librarius-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}luna{S}wolves?',	{S}'warhammer/luna-wolves-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}lyanden',	{S}'warhammer/lyanden-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}minotaurs?',	{S}'warhammer/minotaurs-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}mymeara',	{S}'warhammer/mymeara-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}navis?{S}nobilite',	{S}'warhammer/navis-nobilite-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}necrons?',	{S}'warhammer/necrons-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}nova{S}marines?',	{S}'warhammer/nova-marines-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}nurgle{S}icon',	{S}'warhammer/nurgle-icon-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}order{S}of{S}our{S}martyred{S}lady',	{S}'warhammer/order-of-our-martyred-lady-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}order{S}of{S}the{S}bloody{S}rose',	{S}'warhammer/order-of-the-bloody-rose-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}order{S}of{S}the{S}valorous{S}heart',	{S}'warhammer/order-of-the-valorous-heart-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}ordo{S}malleus',	{S}'warhammer/ordo-malleus-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}ordo{S}reductor',	{S}'warhammer/ordo-reductor-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}orks?',	{S}'warhammer/orks-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}pauper{S}princes?',	{S}'warhammer/pauper-princes-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}pre{S}heresy{S}dark{S}angels?',	{S}'warhammer/pre-heresy-dark-angels-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}pre{S}heresy{S}iron{S}warriors?',	{S}'warhammer/pre-heresy-iron-warriors-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}raptor{S}imperialis?',	{S}'warhammer/raptor-imperialis-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}raptors?',	{S}'warhammer/raptors-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}raven{S}guard',	{S}'warhammer/raven-guard-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}ravenwing',	{S}'warhammer/ravenwing-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}reclusiam',	{S}'warhammer/reclusiam-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}rogue{S}trader',	{S}'warhammer/rogue-trader-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}saim{S}hann',	{S}'warhammer/saim-hann-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}salamanders?',	{S}'warhammer/salamanders-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}silver{S}skulls?',	{S}'warhammer/silver-skulls-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}silver{S}templars?',	{S}'warhammer/silver-templars-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}sisters?{S}of{S}battle',	{S}'warhammer/sisters-of-battle-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}skitarii',	{S}'warhammer/skitarii-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}skull{S}laurals?',	{S}'warhammer/skull-laurals-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}skull',	{S}'warhammer/skull-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}slaanesh',	{S}'warhammer/slaanesh-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}solar{S}auxilia',	{S}'warhammer/solar-auxilia-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}sons?{S}of{S}the{S}phoenix',	{S}'warhammer/sons-of-the-phoenix-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}space{S}wolfs?',	{S}'warhammer/space-wolfs-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}star{S}of{S}chaos?',	{S}'warhammer/star-of-chaos-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}star{S}phantoms?',	{S}'warhammer/star-phantoms-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}steel{S}legion',	{S}'warhammer/steel-legion-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}sword{S}03',	{S}'warhammer/sword-03-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}sword{S}alternate',	{S}'warhammer/sword-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}sword',	{S}'warhammer/sword-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}tactical{S}alternate',	{S}'warhammer/tactical-alternate-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}tactical',	{S}'warhammer/tactical-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}tanith',	{S}'warhammer/tanith-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}tau',	{S}'warhammer/tau-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}temple{S}callidus',	{S}'warhammer/temple-callidus-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}temple{S}eversor',	{S}'warhammer/temple-eversor-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}third{S}covenant',	{S}'warhammer/third-covenant-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}thousand{S}sons?{S}preheresy',	{S}'warhammer/thousand-sons-preheresy-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}thousand{S}sons?',	{S}'warhammer/thousand-sons-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}twisted{S}helix',	{S}'warhammer/twisted-helix-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}tyranid',	{S}'warhammer/tyranid-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}tzeentch',	{S}'warhammer/tzeentch-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}ulthwe',	{S}'warhammer/ulthwe-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}ultramarines?',	{S}'warhammer/ultramarines-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}vindicare{S}temple',	{S}'warhammer/vindicare-temple-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}war{S}hounds?',	{S}'warhammer/war-hounds-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}white{S}scars?',	{S}'warhammer/white-scars-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}word{S}bearers?{S}pre{S}heresy',	{S}'warhammer/word-bearers-pre-heresy-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}word{S}bearers?',	{S}'warhammer/word-bearers-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}world{S}eaters?',	{S}'warhammer/world-eaters-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}xenos?',	{S}'warhammer/xenos-symbol"); return CHARGE; }
symbols?{S}of{S}?the{S}ynnead',	{S}'warhammer/ynnead-symbol"); return CHARGE; }
     );
 {S}
